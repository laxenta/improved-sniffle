const { SlashCommandBuilder, EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder, PermissionFlagsBits, Collection, MessageFlags } = require('discord.js');
const mongoose = require('mongoose');
const ms = require('ms');
const { logger } = require('../../../utils/logger');
const { v4: uuidv4 } = require('uuid');
const { registerButton } = require('../../../handlers/buttonHandler.js');

// Visual and UI Constants
const STYLES = {
    COLORS: {
        PRIMARY: '#FF00FF',    // Active giveaways
        SUCCESS: '#00FF00',    // Success messages
        ERROR: '#FF0000',      // Errors
        ENDED: '#4F4F4F',     // Ended giveaways
        SPECIAL: '#FFD700'     // Special/featured giveaways
    },
    EMOJIS: {
        GIFT: '🎁',
        TIMER: '⏰',
        PARTY: '🎉',
        WINNER: '👑',
        USERS: '👥',
        CHECK: '✅',
        ERROR: '❌',
        RELOAD: '🔄'
    }
};

const CONSTANTS = {
    AUTO_CLEAR: {
        ENABLED: true,
        DELAY: 7 * 24 * 60 * 60 * 1000, // 7 days
        CHECK_INTERVAL: 12 * 60 * 60 * 1000 // 12 hours
    }
};

// Enhanced MongoDB Schema with indexing and validation
const giveawaySchema = new mongoose.Schema({
    messageId: { 
        type: String, 
        required: true, 
        unique: true,
        index: true 
    },
    guildId: { 
        type: String, 
        required: true,
        index: true 
    },
    channelId: { 
        type: String, 
        required: true 
    },
    prize: {
        type: String,
        required: true,
        maxlength: [256, 'Prize name too long']
    },
    winnerCount: {
        type: Number,
        required: true,
        min: [1, 'Must have at least 1 winner'],
        max: [50, 'Cannot have more than 50 winners']
    },
    duration: {
        type: Number,
        required: true,
        min: [60000, 'Duration must be at least 1 minute']
    },
    host: {
        id: String,
        tag: String,
        avatar: String
    },
    requirements: {
        roles: [String],
        minAccountAge: Number,
        minGuildAge: Number,
        customCheck: String
    },
    status: {
        type: String,
        enum: ['ACTIVE', 'ENDED', 'CANCELLED'],
        default: 'ACTIVE',
        index: true
    },
    participants: [{
        userId: String,
        joinedAt: { type: Date, default: Date.now },
        eligible: { type: Boolean, default: true },
        metadata: mongoose.Schema.Types.Mixed
    }],
    winners: [{
        userId: String,
        selectedAt: Date,
        claimed: { type: Boolean, default: false }
    }],
    timestamps: {
        start: { type: Date, default: Date.now },
        end: Date,
        lastUpdated: { type: Date, default: Date.now }
    },
    features: {
        allowMultipleWins: { type: Boolean, default: false },
        requireClaim: { type: Boolean, default: false },
        claimTimeout: { type: Number, default: 86400000 }, // 24 hours
        autoReroll: { type: Boolean, default: true }
    },
    metadata: {
        type: mongoose.Schema.Types.Mixed,
        default: {}
    }
}, {
    timestamps: true
});

// Indexes for better query performance
giveawaySchema.index({ 'timestamps.end': 1, status: 1 });
giveawaySchema.index({ guildId: 1, status: 1 });

// Update timestamp on save
giveawaySchema.pre('save', function(next) {
    this.timestamps.lastUpdated = new Date();
    next();
});

const Giveaway = mongoose.models.Giveaway || mongoose.model('Giveaway', giveawaySchema);

// Utility Functions
function formatTime(ms) {
    const seconds = Math.floor((ms / 1000) % 60);
    const minutes = Math.floor((ms / (1000 * 60)) % 60);
    const hours = Math.floor((ms / (1000 * 60 * 60)) % 24);
    const days = Math.floor(ms / (1000 * 60 * 60 * 24));

    const parts = [];
    if (days > 0) parts.push(`${days}d`);
    if (hours > 0) parts.push(`${hours}h`);
    if (minutes > 0) parts.push(`${minutes}m`);
    if (seconds > 0) parts.push(`${seconds}s`);

    return parts.join(' ');
}

function createGiveawayEmbed(giveaway, isEnded = false) {
    const embed = new EmbedBuilder()
        .setColor(isEnded ? STYLES.COLORS.ENDED : STYLES.COLORS.PRIMARY)
        .setTitle(`${STYLES.EMOJIS.GIFT} ${giveaway.prize}`)
        .addFields([
            {
                name: `${STYLES.EMOJIS.WINNER} Winners`,
                value: `${giveaway.winnerCount}`,
                inline: true
            },
            {
                name: `${STYLES.EMOJIS.USERS} Participants`,
                value: `${giveaway.participants.length}`,
                inline: true
            },
            {
                name: `${STYLES.EMOJIS.TIMER} ${isEnded ? 'Ended' : 'Ends'}`,
                value: isEnded ? 'Giveaway has ended' : 
                    `<t:${Math.floor(giveaway.timestamps.end.getTime() / 1000)}:R>`,
                inline: true
            }
        ])
        .setFooter({ 
            text: `Hosted by ${giveaway.host.tag} • ID: ${giveaway.messageId}`,
            iconURL: giveaway.host.avatar
        })
        .setTimestamp();

    if (giveaway.requirements.roles?.length) {
        embed.addFields({
            name: '📋 Requirements',
            value: giveaway.requirements.roles.map(r => `<@&${r}>`).join(', '),
            inline: false
        });
    }

    if (isEnded && giveaway.winners.length) {
        embed.addFields({
            name: '🎉 Winners',
            value: giveaway.winners.map(w => `<@${w.userId}>`).join(', '),
            inline: false
        });
    }

    return embed;
}

// Add new classes
class GiveawayButtons {
    static async create(giveaway, hostId) {
        const joinId = `giveaway_join_${giveaway.messageId}`;
        const endId = `giveaway_end_${giveaway.messageId}`;
        const rerollId = `giveaway_reroll_${giveaway.messageId}`;

        registerButton(joinId, [], async (interaction) => {
            try {
                await interaction.deferUpdate();
                await GiveawayHandlers.handleParticipantJoin(interaction, giveaway);
            } catch (error) {
                logger.error(`Join button error: ${error}`);
                await interaction.followUp({
                    content: `${STYLES.EMOJIS.ERROR} ${error.message}`,
                    ephemeral: true
                }).catch(() => {});
            }
        }, true);

        registerButton(endId, [hostId], async (interaction) => {
            try {
                await interaction.deferUpdate();
                await GiveawayHandlers.handleGiveawayEnd(interaction, giveaway.messageId);
            } catch (error) {
                logger.error(`End button error: ${error}`);
                await interaction.followUp({
                    content: `${STYLES.EMOJIS.ERROR} ${error.message}`,
                    ephemeral: true
                }).catch(() => {});
            }
        }, true);

        registerButton(rerollId, [hostId], async (interaction) => {
            try {
                await interaction.deferUpdate();
                await GiveawayHandlers.handleGiveawayReroll(interaction, giveaway.messageId);
            } catch (error) {
                logger.error(`Reroll button error: ${error}`);
                await interaction.followUp({
                    content: `${STYLES.EMOJIS.ERROR} ${error.message}`,
                    ephemeral: true
                }).catch(() => {});
            }
        }, true);

        return new ActionRowBuilder().addComponents(
            new ButtonBuilder()
                .setCustomId(joinId)
                .setLabel(`Join (${giveaway.participants.length})`)
                .setEmoji(STYLES.EMOJIS.PARTY)
                .setStyle(ButtonStyle.Primary),
            new ButtonBuilder()
                .setCustomId(endId)
                .setLabel('End')
                .setEmoji(STYLES.EMOJIS.TIMER)
                .setStyle(ButtonStyle.Danger)
                .setDisabled(giveaway.status !== 'ACTIVE'),
            new ButtonBuilder()
                .setCustomId(rerollId)
                .setLabel('Reroll')
                .setEmoji(STYLES.EMOJIS.RELOAD)
                .setStyle(ButtonStyle.Secondary)
                .setDisabled(giveaway.status !== 'ENDED')
        );
    }
}

class GiveawayManager {
    static async create(options) {
        const { prize, channel, duration, winnerCount, host, requirements } = options;
        
        const giveaway = new Giveaway({
            prize,
            channelId: channel.id,
            guildId: channel.guild.id,
            winnerCount,
            duration: ms(duration),
            host: {
                id: host.id,
                tag: host.tag,
                avatar: host.displayAvatarURL()
            },
            requirements,
            timestamps: {
                start: new Date(),
                end: new Date(Date.now() + ms(duration))
            }
        });

        const embed = createGiveawayEmbed(giveaway);
        const components = await GiveawayButtons.create(giveaway, host.id);

        const message = await channel.send({
            content: options.pingEveryone ? '@everyone' : null,
            embeds: [embed],
            components: [components]
        });

        giveaway.messageId = message.id;
        await giveaway.save();

        return giveaway;
    }

    static async end(messageId, immediate = false) {
        const giveaway = await Giveaway.findOne({ messageId });
        if (!giveaway) throw new Error('Giveaway not found');

        if (!immediate && Date.now() < giveaway.timestamps.end) {
            throw new Error('Giveaway has not ended yet');
        }

        const winners = await this.selectWinners(giveaway);
        giveaway.winners = winners.map(userId => ({ userId, selectedAt: new Date() }));
        giveaway.status = 'ENDED';
        await giveaway.save();

        return winners;
    }

    static async selectWinners(giveaway) {
        const eligible = giveaway.participants.filter(p => p.eligible);
        const winners = [];
        const count = Math.min(giveaway.winnerCount, eligible.length);

        while (winners.length < count) {
            const winner = eligible[Math.floor(Math.random() * eligible.length)];
            if (!winners.includes(winner.userId)) {
                winners.push(winner.userId);
            }
        }

        return winners;
    }
}

class GiveawayHandlers {
    static async handleParticipantJoin(interaction, giveaway) {
        const userId = interaction.user.id;
        const member = await interaction.guild.members.fetch(userId);

        if (giveaway.status !== 'ACTIVE') {
            throw new Error('This giveaway has ended');
        }

        if (giveaway.requirements.roles?.length) {
            const hasRole = giveaway.requirements.roles.some(roleId => 
                member.roles.cache.has(roleId)
            );
            if (!hasRole) {
                throw new Error('You do not meet the role requirements');
            }
        }

        const existing = giveaway.participants.find(p => p.userId === userId);
        if (existing) {
            giveaway.participants = giveaway.participants.filter(p => p.userId !== userId);
            await giveaway.save();
            
            const embed = createGiveawayEmbed(giveaway);
            const components = await GiveawayButtons.create(giveaway, giveaway.host.id);
            await interaction.message.edit({ embeds: [embed], components: [components] });
            return;
        }

        giveaway.participants.push({
            userId,
            joinedAt: new Date(),
            eligible: true,
            metadata: {
                roles: member.roles.cache.map(r => r.id)
            }
        });

        await giveaway.save();
        const embed = createGiveawayEmbed(giveaway);
        const components = await GiveawayButtons.create(giveaway, giveaway.host.id);
        await interaction.message.edit({ embeds: [embed], components: [components] });
    }

    static async handleGiveawayEnd(interaction, messageId) {
        const giveaway = await Giveaway.findOne({ messageId });
        if (!giveaway) throw new Error('Giveaway not found');

        if (interaction.user.id !== giveaway.host.id && 
            !interaction.memberPermissions.has(PermissionFlagsBits.ManageEvents)) {
            throw new Error('You do not have permission to end this giveaway');
        }

        const winners = await GiveawayManager.end(messageId, true);
        const winnerMentions = winners.map(id => `<@${id}>`).join(', ');

        const embed = createGiveawayEmbed(giveaway, true);
        const components = await GiveawayButtons.create(giveaway, giveaway.host.id);
        await interaction.message.edit({ embeds: [embed], components: [components] });

        await interaction.channel.send({
            content: `${STYLES.EMOJIS.PARTY} Congratulations ${winnerMentions}! You won **${giveaway.prize}**!`,
            allowedMentions: { users: winners }
        });
    }

    static async handleGiveawayReroll(interaction, messageId, count = 1) {
        const giveaway = await Giveaway.findOne({ messageId });
        if (!giveaway) throw new Error('Giveaway not found');

        if (giveaway.status !== 'ENDED') {
            throw new Error('This giveaway has not ended yet');
        }

        if (interaction.user.id !== giveaway.host.id && 
            !interaction.memberPermissions.has(PermissionFlagsBits.ManageEvents)) {
            throw new Error('You do not have permission to reroll this giveaway');
        }

        const newWinners = await GiveawayManager.selectWinners(giveaway);
        const winnerMentions = newWinners.map(id => `<@${id}>`).join(', ');

        giveaway.winners = newWinners.map(userId => ({
            userId,
            selectedAt: new Date(),
            claimed: false
        }));
        await giveaway.save();

        const embed = createGiveawayEmbed(giveaway, true);
        const components = await GiveawayButtons.create(giveaway, giveaway.host.id);
        await interaction.message.edit({ embeds: [embed], components: [components] });

        await interaction.channel.send({
            content: `${STYLES.EMOJIS.PARTY} New winner${count > 1 ? 's' : ''} for **${giveaway.prize}**: ${winnerMentions}!`,
            allowedMentions: { users: newWinners }
        });
    }
}

class GiveawayChecker {
    static async checkEndingGiveaways() {
        const now = new Date();
        const endingGiveaways = await Giveaway.find({
            status: 'ACTIVE',
            'timestamps.end': { $lte: now }
        });

        for (const giveaway of endingGiveaways) {
            try {
                const channel = await client.channels.fetch(giveaway.channelId);
                if (!channel) continue;

                const winners = await GiveawayManager.end(giveaway.messageId);
                const winnerMentions = winners.map(id => `<@${id}>`).join(', ');

                const message = await channel.messages.fetch(giveaway.messageId);
                const embed = createGiveawayEmbed(giveaway, true);
                const components = await GiveawayButtons.create(giveaway, giveaway.host.id);
                await message.edit({ embeds: [embed], components: [components] });

                await channel.send({
                    content: `${STYLES.EMOJIS.PARTY} Giveaway ended! Congratulations ${winnerMentions}! You won **${giveaway.prize}**!`,
                    allowedMentions: { users: winners }
                });
            } catch (error) {
                logger.error(`Error ending giveaway ${giveaway.messageId}:`, error);
            }
        }
    }
}

class GiveawayAutoCleaner {
    static async clearOldGiveaways() {
        if (!CONSTANTS.AUTO_CLEAR.ENABLED) return;

        const cutoffDate = new Date(Date.now() - CONSTANTS.AUTO_CLEAR.DELAY);
        
        try {
            const oldGiveaways = await Giveaway.find({
                status: 'ENDED',
                'timestamps.end': { $lt: cutoffDate }
            });

            for (const giveaway of oldGiveaways) {
                try {
                    const channel = await client.channels.fetch(giveaway.channelId);
                    if (channel) {
                        const message = await channel.messages.fetch(giveaway.messageId);
                        if (message) await message.delete().catch(() => {});
                    }
                } catch (error) {
                    logger.error(`Failed to delete giveaway message: ${error}`);
                }

                await Giveaway.deleteOne({ _id: giveaway._id });
                logger.info(`Cleaned up old giveaway: ${giveaway.messageId}`);
            }
        } catch (error) {
            logger.error(`Auto-cleaner error: ${error}`);
        }
    }

    static initialize() {
        if (!CONSTANTS.AUTO_CLEAR.ENABLED) return;
        setInterval(() => {
            this.clearOldGiveaways().catch(error => {
                logger.error(`Auto-cleaner interval error: ${error}`);
            });
        }, CONSTANTS.AUTO_CLEAR.CHECK_INTERVAL);
        logger.info('Giveaway auto-cleaner initialized');
    }
}

// Initialize checker
setInterval(GiveawayChecker.checkEndingGiveaways, 30000);
GiveawayAutoCleaner.initialize();

// Replace the existing command handlers
async function handleStart(interaction) {
    const prize = interaction.options.getString('prize');
    const channel = interaction.options.getChannel('channel');
    const duration = interaction.options.getString('duration');
    const winnerCount = interaction.options.getNumber('winners');
    const requiredRole = interaction.options.getRole('required_role');
    const requireClaim = interaction.options.getBoolean('require_claim') ?? false;
    const pingEveryone = interaction.options.getBoolean('ping_everyone') ?? false;

    await interaction.deferReply({ ephemeral: true });

    try {
        const giveaway = await GiveawayManager.create({
            prize,
            channel,
            duration,
            winnerCount,
            host: interaction.user,
            requirements: {
                roles: requiredRole ? [requiredRole.id] : [],
            },
            features: {
                requireClaim
            },
            pingEveryone
        });

        await interaction.editReply({
            embeds: [
                new EmbedBuilder()
                    .setColor(STYLES.COLORS.SUCCESS)
                    .setTitle(`${STYLES.EMOJIS.CHECK} Giveaway Started`)
                    .setDescription(`[Jump to Giveaway](${giveaway.messageUrl})`)
            ]
        });
    } catch (error) {
        throw new Error(`Failed to start giveaway: ${error.message}`);
    }
}

// Update the execute method
module.exports = {
    data: new SlashCommandBuilder()
        .setName('giveaway')
        .setDescription('Manage giveaways')
        .setContexts(0, 1) // 0 = Guild, 1 = User, 2 = DM (Excluded) so i can rememebr fr fr

        .setDefaultMemberPermissions(PermissionFlagsBits.ManageEvents)
        .addSubcommand(sub =>
            sub.setName('start')
                .setDescription('Start a new giveaway')
                .addStringOption(opt => 
                    opt.setName('prize')
                        .setDescription('What are you giving away?')
                        .setRequired(true)
                        .setMaxLength(256)
                )
                .addChannelOption(opt => 
                    opt.setName('channel')
                        .setDescription('Where to host the giveaway')
                        .setRequired(true)
                )
                .addStringOption(opt => 
                    opt.setName('duration')
                        .setDescription('How long should it last? (1h, 2d, etc)')
                        .setRequired(true)
                )
                .addNumberOption(opt => 
                    opt.setName('winners')
                        .setDescription('Number of winners')
                        .setRequired(true)
                        .setMinValue(1)
                        .setMaxValue(50)
                )
                .addRoleOption(opt => 
                    opt.setName('required_role')
                        .setDescription('Role required to participate')
                )
                .addBooleanOption(opt =>
                    opt.setName('require_claim')
                        .setDescription('Do winners need to claim their prize?')
                )
                .addBooleanOption(opt =>
                    opt.setName('ping_everyone')
                        .setDescription('Ping @everyone when starting?')
                )
        )
        .addSubcommand(sub =>
            sub.setName('end')
                .setDescription('End a giveaway early')
                .addStringOption(opt => 
                    opt.setName('message_id')
                        .setDescription('Giveaway message ID')
                        .setRequired(true)
                )
        )
        .addSubcommand(sub =>
            sub.setName('reroll')
                .setDescription('Reroll a giveaway')
                .addStringOption(opt => 
                    opt.setName('message_id')
                        .setDescription('Giveaway message ID')
                        .setRequired(true)
                )
                .addNumberOption(opt =>
                    opt.setName('count')
                        .setDescription('Number of winners to reroll')
                        .setMinValue(1)
                )
        )
        .addSubcommand(sub =>
            sub.setName('cleanup')
                .setDescription('Manually cleanup old giveaways')
                .addNumberOption(opt =>
                    opt.setName('days')
                        .setDescription('Delete giveaways older than X days')
                        .setMinValue(1)
                        .setMaxValue(30)
                )
        ),

    async execute(interaction) {
        if (!interaction.guild) {
            return interaction.reply({
                content: 'This command can only be used in servers.',
                ephemeral: true
            });
        }

        try {
            const subcommand = interaction.options.getSubcommand();
            switch (subcommand) {
                case 'start':
                    await handleStart(interaction);
                    break;
                case 'end':
                    await handleEnd(interaction);
                    break;
                case 'reroll':
                    await handleReroll(interaction);
                    break;
                case 'cleanup':
                    const days = interaction.options.getNumber('days') || 7;
                    await interaction.deferReply({ ephemeral: true });
                    
                    try {
                        const cutoffDate = new Date(Date.now() - (days * 24 * 60 * 60 * 1000));
                        const deletedCount = await Giveaway.deleteMany({
                            guildId: interaction.guildId,
                            status: 'ENDED',
                            'timestamps.end': { $lt: cutoffDate }
                        });

                        await interaction.editReply({
                            content: `${STYLES.EMOJIS.CHECK} Cleaned up ${deletedCount.deletedCount} old giveaways.`
                        });
                    } catch (error) {
                        throw new Error(`Cleanup failed: ${error.message}`);
                    }
                    break;
                default:
                    throw new Error('Invalid subcommand');
            }
        } catch (error) {
            logger.error(`Giveaway error: ${error.stack}`);
            const errorEmbed = new EmbedBuilder()
                .setColor(STYLES.COLORS.ERROR)
                .setTitle(`${STYLES.EMOJIS.ERROR} Error`)
                .setDescription(error.message);

            if (interaction.deferred) {
                await interaction.editReply({ embeds: [errorEmbed], ephemeral: true });
            } else {
                await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
            }
        }
    }
};