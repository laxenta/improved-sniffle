<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - <%= botName %></title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/hover.css/2.3.1/css/hover-min.css">
    <script src="/js/authManager.js"></script>
    <script src="/js/playlist-manager.js"></script>
    <script src="/js/music-player.js"></script>
    <script src="/js/song-manager.js"></script>


</head>
<body>
    <div class="animated-background"></div>
    <div class="animated-particles" id="particles"></div>

    <div id="toast-container"></div>
    <div class="progress-bar" id="progress-bar">
        <div class="progress-filled"></div>
    </div>

    <header>
        <nav>
            <div class="logo">
                <img src="<%= botAvatar || '/default-avatar.png' %>" alt="<%= botName %>">
                <span><%= botName %></span>
            </div>
            <% if (user) { %>
                <div class="user-info">
                    <img src="https://images-eds-ssl.xboxlive.com/image?url=4rt9.lXDC4H_93laV1_eHM0OYfiFeMI2p9MWie0CvL99U4GA1gf6_kayTt_kBblFwHwo8BW8JXlqfnYxKPmmBevsdZpJiIhrXJKvOSYipsaHqFIbCP6s5rOtPA59rEWG0TDcTxZjqTOH7KyNDpp3SdjDoloGHqOiM0jglAUqKA4-&format=source" alt="<%= user.username %>">         
                    <span><%= user.username %></span>
                    <% if (hasSpotify) { %>
                        <span class="spotify-connected">
                            <i class="fab fa-spotify"></i> Connected :3
                        </span>
                    <% } %>
                    <button 
                        onclick="window.authManager.logout()" 
                        class="logout-btn"
                        type="button"
                    >
                        <i class="fas fa-sign-out-alt"></i> Logout
                    </button>
                </div>
            <% } %>
        </nav>
    </header>

    <main>
        <% if (!hasSpotify) { %>
            <div class="auth-prompt">
                <h2>Connect Your Spotify</h2>
                <p>Link your Spotify account to start playing music directly in Discord</p>
                <a href="/auth/spotify" class="spotify-auth-btn">
                    <i class="fab fa-spotify"></i> Link Spotify Account
                </a>
            </div>
        <% } else { %>
            <!--srch -->
            <section class="search-section">
                <h2><i class="fas fa-search"></i> Search and Play</h2>
                <div class="search-container">
                    <input 
                        type="text" 
                        id="search-input" 
                        placeholder="Search for tracks, artists, or paste a Spotify link..." 
                        aria-label="Search"
                    >
                    <button id="search-button">
                        <i class="fas fa-search"></i> Search
                    </button>
                </div>
                <div id="search-results" class="content-grid">
                    <!-- Search results will be populated here -->
                </div>
            </section>

            <!-- Contentsss :3 -->
            <div class="tabs">
                <div class="tab active" data-tab="playlists">
                    <i class="fas fa-list"></i> Playlists
                </div>
                <div class="tab" data-tab="liked-songs">
                    <i class="fas fa-heart"></i> Liked Songs
                </div>
                <div class="tab" data-tab="queue">
                    <i class="fas fa-music"></i> Queue
                </div>
            </div>
<!-- playlist -->
            <section class="tab-content active" id="playlists-tab">
                <h2>
                    <i class="fas fa-list"></i> Your Playlists
                    <button class="refresh-button" id="refresh-playlists" title="Refresh">
                        <i class="fas fa-sync-alt"></i>
                    </button>
                </h2>
                <div id="playlist-container" class="content-grid">
                    <!-- Skeleton loaders -->
                    <% for (let i = 0; i < 8; i++) { %>
                        <div class="skeleton-card">
                            <div class="skeleton-img skeleton"></div>
                            <div class="skeleton-title skeleton"></div>
                            <div class="skeleton-subtitle skeleton"></div>
                            <div class="skeleton-button skeleton"></div>
                        </div>
                    <% } %>
                </div>
            </section>
<!-- liked songs -->
            <section class="tab-content" id="liked-songs-tab"> 
                <h2>
                    <i class="fas fa-heart"></i> Liked Songs
                    <button class="refresh-button" id="refresh-liked-songs" title="Refresh">
                        <i class="fas fa-sync-alt"></i>
                    </button>
                </h2>
                <div id="liked-songs-container" class="content-grid">
                    <% for (let i = 0; i < 8; i++) { %>
                        <div class="skeleton-card">
                            <div class="skeleton-img skeleton"></div>
                            <div class="skeleton-title skeleton"></div>
                            <div class="skeleton-subtitle skeleton"></div>
                            <div class="skeleton-button skeleton"></div>
                        </div>
                    <% } %>
                </div>
            </section>

            <!-- display the queue -->
            <section id="queue-tab" class="tab-content">
                <h2>
                    <i class="fas fa-list"></i> Current Queue
                    <button class="refresh-button"
                        onclick="window.musicPlayer.updateQueueDisplay(window.musicPlayer.activeGuildId)">
                        <i class="fas fa-sync-alt"></i>
                    </button>
                </h2>
                <div id="queue-container" class="queue-container">
                    <!-- Queue will be populated here -->
                </div>
            </section>
        <% } %>
    </main>

    <!--footer -->
    <footer>
        <div class="footer-content">
            <p>&copy; <%= new Date().getFullYear() %> <%= botName %> | /cute </p>
            <div class="bot-status">
                <p>Bot Status: <span id="bot-status" class="status-badge offline">Checking...</span></p>
                <span id="latency" class="latency">Latency: --ms</span>
            </div>
            <div class="github-link">
                <a href="https://github.com/yourusername/improved-sniffle" target="_blank">
                    <i class="fab fa-github"></i> View on GitHub
                </a>
                <span class="version-info">Version 1.0.0</span> <!-- Added version info -->
            </div>
        </div>
    </footer>

<style>

:root {
    --primary: #7289da;
    --primary-dark: #5f73bc;
    --secondary: #1DB954;
    --secondary-dark: #1aa34a;
    --text: #dcddde;
    --background: #36393f;
    --background-alt: #2f3136;
    --card: #40444b;
    --border: #202225;
    --danger: #ed4245;
    --glass-background: rgba(64, 68, 75, 0.25);
    --glass-border: rgba(255, 255, 255, 0.1);
    --animation-curve: cubic-bezier(0.4, 0, 0.2, 1);
    --shadow-color: rgba(0, 0, 0, 0.3);
    --toast-bg: rgba(32, 34, 37, 0.9);
}

* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: var(--background);
    color: var(--text);
    line-height: 1.6;
}

header {
    background-color: var(--background-alt);
    border-bottom: 1px solid var(--border);
    padding: 1rem;
    position: sticky;
    top: 0;
    z-index: 100;
}

nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    max-width: 1200px;
    margin: 0 auto;
}

.logo {
    display: flex;
    align-items: center;
    font-size: 1.5rem;
    font-weight: bold;
    color: white;
}

.logo img {
    height: 40px;
    width: 40px;
    border-radius: 50%;
    margin-right: 10px;
}

.user-info {
    display: flex;
    align-items: center;
}

.user-info img {
    height: 40px;
    width: 40px;
    border-radius: 50%;
    margin-right: 10px;
}

.spotify-connected {
    background-color: var (--secondary);
    color: white;
    border-radius: 20px;
    padding: 0.25rem 0.75rem;
    margin-left: 10px;
    font-size: 0.8rem;
    display: flex;
    align-items: center;
}

.spotify-connected i {
    margin-right: 5px;
}

main {
    max-width: 1200px;
    margin: 2rem auto;
    padding: 0 1rem;
}

.auth-prompt {
    text-align: center;
    background-color: var(--card);
    border-radius: 10px;
    padding: 3rem;
    margin: 5rem auto;
    max-width: 600px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
}

.auth-prompt h2 {
    margin-bottom: 1rem;
    font-size: 2rem;
}

.auth-prompt p {
    margin-bottom: 2rem;
    color: #a0a0a0;
}

.spotify-auth-btn {
    background-color: var(--secondary);
    color: white;
    border: none;
    padding: 0.75rem 2rem;
    border-radius: 30px;
    font-size: 1rem;
    font-weight: bold;
    cursor: pointer;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    transition: all 0.2s ease;
}

.spotify-auth-btn:hover {
    background-color: var(--secondary-dark);
    transform: translateY(-2px);
}

.spotify-auth-btn i {
    margin-right: 10px;
}

section {
    margin-bottom: 3rem;
}

section h2 {
    margin-bottom: 1.5rem;
    border-bottom: 1px solid var(--border);
    padding-bottom: 0.5rem;
    display: flex;
    align-items: center;
}

section h2 i {
    margin-right: 10px;
    color: var(--secondary);
}

.loading {
    text-align: center;
    padding: 2rem;
    color: #a0a0a0;
}

.error-message {
    background-color: rgba(237, 66, 69, 0.1);
    border: 1px solid var(--danger);
    color: var(--danger);
    padding: 1rem;
    border-radius: 5px;
    text-align: center;
    cursor: pointer;
}

.error-message:hover {
    background-color: rgba(237, 66, 69, 0.2);
}

.content-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1.5rem;
}

.now-playing-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 1.5rem;
}

.playlist-card, .song-card, .player-card {
    background-color: var(--card);
    border-radius: 8px;
    overflow: hidden;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    height: 100%;
    display: flex;
    flex-direction: column;
}

.playlist-card:hover, .song-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
}

.playlist-card img, .song-card img {
    width: 100%;
    aspect-ratio: 1/1;
    object-fit: cover;
}

.playlist-info, .song-info {
    padding: 1rem;
    display: flex;
    flex-direction: column;
    flex-grow: 1;
}

.playlist-info h3, .song-info h4 {
    margin-bottom: 0.5rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.playlist-info p, .song-info p {
    color: #a0a0a0;
    margin-bottom: 1rem;
    font-size: 0.9rem;
}

button {
    background-color: var(--primary);
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    cursor: pointer;
    font-weight: bold;
    margin-top: auto;
    transition: background-color 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
}

button:hover {
    background-color: var(--primary-dark);
}

button i {
    margin-right: 5px;
}

.player-card {
    display: flex;
    flex-direction: row;
    padding: 1rem;
    align-items: center;
}

.player-card img {
    width: 100px;
    height: 100px;
    border-radius: 5px;
    object-fit: cover;
}

.track-details {
    margin-left: 1rem;
    flex-grow: 1;
}

.track-details h3 {
    margin-bottom: 0.3rem;
}

.track-details .author {
    color: #a0a0a0;
    font-size: 0.9rem;
    margin-bottom: 0.3rem;
}

.track-details .guild {
    color: var(--secondary);
    font-size: 0.8rem;
    margin-bottom: 1rem;
}

.controls {
    display: flex;
    gap: 0.5rem;
}

.controls button {
    padding: 0.3rem 0.8rem;
    font-size: 0.9rem;
}

.search-container {
    margin-bottom: 2rem;
    display: flex;
    gap: 1rem;
}

.search-container input {
    flex-grow: 1;
    padding: 0.75rem 1rem;
    border-radius: 4px;
    border: 1px solid var(--border);
    background-color: var(--background-alt);
    color: var(--text);
    font-size: 1rem;
}

.search-container input:focus {
    outline: none;
    border-color: var(--primary);
}

.search-container button {
    padding: 0.75rem 1.5rem;
}

.tabs {
    display: flex;
    border-bottom: 1px solid var(--border);
    margin-bottom: 2rem;
}

.tab {
    padding: 0.75rem 1.5rem;
    cursor: pointer;
    border-bottom: 3px solid transparent;
    font-weight: bold;
}

.tab.active {
    border-bottom-color: var(--secondary);
    color: white;
}

.tab-content {
    display: none;
}

.tab-content.active {
    display: block;
}

.logout-btn {
    background-color: transparent;
    color: #a0a0a0;
    border: 1px solid var(--border);
    padding: 0.5rem 1rem;
    border-radius: 4px;
    cursor: pointer;
    margin-left: 1rem;
    font-size: 0.9rem;
}

.logout-btn:hover {
    background-color: rgba(237, 66, 69, 0.1);
    color: var(--danger);
    border-color: var(--danger);
}

@media (max-width: 768px) {
    .content-grid {
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    }
    
    .now-playing-grid {
        grid-template-columns: 1fr;
    }
    
    .player-card {
        flex-direction: column;
        text-align: center;
    }
    
    .track-details {
        margin-left: 0;
        margin-top: 1rem;
    }
    
    .controls {
        justify-content: center;
    }
}

.tooltip {
    position: relative;
}

.tooltip .tooltip-text {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px;
    position: absolute;
    z-index: 1;
    bottom: 125%;
    left: 50%;
    margin-left: -60px;
    opacity: 0;
    transition: opacity 0.3s;
}

.tooltip:hover .tooltip-text {
    visibility: visible;
    opacity: 1;
}

.status-badge {
    padding: 3px 8px;
    border-radius: 10px;
    font-size: 0.7rem;
    margin-left: 5px;
}

.status-badge.online {
    background-color: var(--secondary);
}

.status-badge.offline {
    background-color: var(--danger);
}

.refresh-button {
    background-color: transparent;
    color: var(--text);
    border: none;
    margin-left: auto;
    padding: 5px;
    cursor: pointer;
}

.refresh-button:hover {
    color: white;
}

footer {
    text-align: center;
    padding: 2rem 0;
    margin-top: 3rem;
    border-top: 1px solid var(--border);
    color: #a0a0a0;
    font-size: 0.9rem;
}

.skeleton {
    background: linear-gradient(90deg, var(--card) 25%, var(--background-alt) 50%, var(--card) 75%);
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
    border-radius: 4px;
}

@keyframes loading {
    0% {
        background-position: 200% 0;
    }
    100% {
        background-position: -200% 0;
    }
}

.skeleton-card {
    height: 250px;
}

.skeleton-card .skeleton-img {
    height: 160px;
    width: 100%;
}

.skeleton-card .skeleton-title {
    height: 20px;
    margin: 10px;
    width: 80%;
}

.skeleton-card .skeleton-subtitle {
    height: 15px;
    margin: 10px;
    width: 60%;
}

.skeleton-card .skeleton-button {
    height: 30px;
    margin: 10px;
    width: 90%;
}

#search-results {
    margin-top: 2rem;
}

.no-results {
    text-align: center;
    padding: 2rem;
    color: #a0a0a0;
}

.logout-btn.loading {
    opacity: 0.7;
    cursor: not-allowed;
}
.logout-btn.loading i {
    animation: fa-spin 2s infinite linear;
}

/* Animated Background */
.animated-background {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -2;
    background: linear-gradient(-45deg, #23272A, #2C2F33, #7289DA, #99AAB5);
    background-size: 400% 400%;
    animation: gradient 15s ease infinite;
    opacity: 0.8;
}

.animated-particles {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    pointer-events: none;
}

.particle {
    position: absolute;
    background: var(--glass-border);
    border-radius: 50%;
    pointer-events: none;
    animation: float 4s infinite;
}

.progress-bar {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 3px;
    background: var(--background-alt);
    z-index: 1000;
}

.progress-filled {
    width: 0;
    height: 100%;
    background: var(--secondary);
    transition: width 0.3s var(--animation-curve);
}

/* Toast System */
.toast-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1000;
}

.toast {
    display: flex;
    align-items: center;
    padding: 12px 24px;
    background: var(--toast-bg);
    border-radius: 8px;
    margin-bottom: 10px;
    backdrop-filter: blur(10px);
    box-shadow: 0 4px 12px var(--shadow-color);
    animation: slideIn 0.3s var(--animation-curve);
}

.playlist-card, .song-card, .player-card {
    background: var(--glass-background);
    backdrop-filter: blur(10px);
    border: 1px solid var(--glass-border);
    transition: all 0.3s var(--animation-curve);
}

.playlist-card:hover, .song-card:hover {
    transform: translateY(-10px) scale(1.02);
    box-shadow: 0 20px 30px var (--shadow-color);
    border-color: rgba(255, 255, 255, 0.3);
}

@keyframes gradient {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
}

@keyframes float {
    0% {
        transform: translateY(0) translateX(0);
        opacity: 0;
    }
    50% { opacity: 0.8; }
    100% {
        transform: translateY(-100vh) translateX(100px);
        opacity: 0;
    }
}

@keyframes slideIn {
    from {
        transform: translateX(100%);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

/* Playlist Expansion */
.playlist-tracks {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.5s var(--animation-curve);
}

.playlist-tracks.expanded {
    max-height: 2000px;
}

footer {
    background: var(--glass-background);
    backdrop-filter: blur(10px);
    border-top: 1px solid var(--glass-border);
    padding: 2rem 0;
    margin-top: 3rem;
}

.footer-content {
    max-width: 1200px;
    margin: 0 auto;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0 2rem;
}

.latency {
    font-size: 0.8rem;
    color: var(--text);
    margin-left: 1rem;
}

.github-link a {
    color: var(--text);
    text-decoration: none;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    transition: color 0.2s ease;
}

.github-link a:hover {
    color: var(--primary);
}






.playlist-tracks {
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.5s var(--animation-curve);
    }

    .track-item {
        display: grid;
        grid-template-columns: auto 1fr auto auto;
        align-items: center;
        gap: 1rem;
        padding: 0.75rem;
        margin: 0.5rem 0;
        background: var(--glass-background);
        backdrop-filter: blur(10px);
        border: 1px solid var(--glass-border);
        border-radius: 8px;
        transition: transform 0.2s ease;
    }

    .track-item:hover {
        transform: translateX(5px);
        border-color: var(--primary);
    }

    .track-item img {
        width: 40px;
        height: 40px;
        border-radius: 4px;
    }

    .track-info {
        overflow: hidden;
    }

    .track-info h4 {
        margin: 0;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .track-info p {
        margin: 0;
        font-size: 0.9rem;
        color: var(--text);
        opacity: 0.7;
    }

    .track-duration {
        font-size: 0.9rem;
        color: var(--text);
        opacity: 0.7;
    }

    .play-btn {
        padding: 0.5rem;
        width: 36px;
        height: 36px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .loading-spinner {
        text-align: center;
        padding: 2rem;
    }

    .pagination {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 1rem;
        margin-top: 1rem;
        padding: 1rem;
    }

    .page-btn {
        background: var(--glass-background);
        border: 1px solid var(--glass-border);
        padding: 0.5rem 1rem;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .page-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .page-btn:not(:disabled):hover {
        background: var(--primary);
        border-color: var(--primary);
    }


/* playlist viewss */
#playlist-view {
    animation: fadeIn 0.3s ease;
}

.playlist-header {
    display: flex;
    align-items: center;
    margin-bottom: 2rem;
    gap: 1rem;
}

.back-btn {
    background: var(--glass-background);
    border: 1px solid var(--glass-border);
    padding: 0.5rem 1rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s ease;
}

.back-btn:hover {
    background: var(--primary);
    border-color: var(--primary);
}

.sentinel {
    width: 100%;
    height: 100px;
    display: flex;
    align-items: center;
    justify-content: center;
    grid-column: 1 / -1;
}

.spinner {
    width: 40px;
    height: 40px;
    border: 4px solid var(--glass-border);
    border-top-color: var(--primary);
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    to { transform: rotate(360deg); }
}

@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

.toast-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 9999;
    display: flex;
    flex-direction: column;
    gap: 10px;
    max-width: 400px;
}

.toast {
    background: var(--background);
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    overflow: hidden;
    width: 100%;
}

.toast-content {
    display: flex;
    align-items: flex-start;
    padding: 12px;
    gap: 12px;
}

.toast i {
    font-size: 20px;
    flex-shrink: 0;
}

.toast-message {
    flex: 1;
}

.toast-message h4 {
    margin: 0;
    font-size: 16px;
    font-weight: 500;
}

.toast-message p {
    margin: 4px 0 0;
    font-size: 14px;
    opacity: 0.8;
}

.toast-close {
    background: none;
    border: none;
    padding: 4px;
    cursor: pointer;
    opacity: 0.5;
    transition: opacity 0.2s;
}

.toast-close:hover {
    opacity: 1;
}

.toast.success {
    border-left: 4px solid var(--success);
}

.toast.error {
    border-left: 4px solid var(--danger);
}

.toast.info {
    border-left: 4px solid var(--primary);
}

.toast.success i {
    color: var(--success);
}

.toast.error i {
    color: var(--danger);
}

.toast.info i {
    color: var(--primary);
}





body.music-loading {
    cursor: progress;
}

body.music-loading .play-btn {
    opacity: 0.7;
    cursor: not-allowed;
}

body.music-loading .play-btn:hover {
    transform: none;
    background: var(--glass-background);
}

.play-btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
}

.play-btn:disabled:hover {
    transform: none;
    background: var(--glass-background);
}

body.music-loading::after {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(2px);
    pointer-events: none;
    z-index: 9998;
}

/* Ensure toasts stay visible */
#toast-container {
    z-index: 9999;
}

.toast ol {
    padding-left: 0;
    margin: 5px 0 0 20px;
    font-size: 0.9em;
    color: rgba(255, 255, 255, 0.8);
}

.toast ol li {
    margin-bottom: 3px;
}

.toast.fade-out {
    opacity: 0;
    transform: translateX(100%);
    transition: all 0.3s ease;
}
.queue-container {
    background: var(--glass-background);
    border-radius: 8px;
    padding: 1rem;
    margin-top: 1rem;
}

.current-track {
    margin-bottom: 2rem;
}

.track-item {
    display: grid;
    grid-template-columns: auto auto 1fr auto auto;
    gap: 1rem;
    align-items: center;
    padding: 0.75rem;
    background: var(--card);
    border-radius: 4px;
    margin-bottom: 0.5rem;
}

.track-item.current {
    border: 1px solid var(--secondary);
    background: var(--glass-background);
}

.track-item img {
    width: 40px;
    height: 40px;
    border-radius: 4px;
}

.track-item .position {
    width: 24px;
    text-align: center;
    opacity: 0.7;
}

.track-item .requester {
    font-size: 0.8rem;
    opacity: 0.7;
}
</style>
</style>

<script>
    //Session management - streamlined with async/await and better error handling cz fk it
    async function checkSession() {
        try {
            const response = await fetch('/api/auth/verify');
            if (!response.ok) throw new Error(`HTTP error: ${response.status}`);
            
            const data = await response.json();
            
            if (!data.valid) {
                window.location.href = '/auth/discord';
                return false;
            }

            if (!data.user.authStatus.spotify) {
                sessionStorage.setItem('returnPath', window.location.pathname);
                window.location.href = '/auth/spotify';
                return false;
            }
            
            updateBotStatus(true);
            return true;
        } catch (error) {
            console.error('Session check failed:', error);
            updateBotStatus(false);
            return false;
        }
    }

    function handleAuthReturn() {
        const returnPath = sessionStorage.getItem('returnPath');
        if (returnPath) {
            sessionStorage.removeItem('returnPath');
            if (returnPath !== window.location.pathname) {
                window.location.href = returnPath;
            }
        }
    }

    // Unified token refresh function with better error handling
    async function refreshSpotifyToken() {
        try {
            showToast('Refreshing Spotify token...');
            const response = await fetch('/api/spotify/refresh', { 
                method: 'POST',
                headers: { 
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-cache'
                },
                credentials: 'same-origin'
            });
            
            if (response.status === 401) {
                sessionStorage.setItem('returnPath', window.location.pathname);
                window.location.href = '/auth/spotify';
                throw new Error('Token refresh failed - redirecting to auth');
            }
            
            if (!response.ok) {
                throw new Error('Token refresh failed with status: ' + response.status);
            }
            
            const result = await response.json();
            if (!result.success) {
                throw new Error('Token refresh failed');
            }
            
            showToast('Token refreshed successfully!');
            return result;
        } catch (error) {
            console.error('Token refresh failed:', error);
            showToast('Failed to refresh token', 'error');
            throw error;
        }
    }

    // Improved API request wrapper to reduce duplication
    async function apiRequest(url, options = {}, retryCount = 0) {
        try {
            const response = await fetch(url, options);
            
            if (response.status === 401 && retryCount < 2) {
                await refreshSpotifyToken();
                return apiRequest(url, options, retryCount + 1);
            }
            
            if (!response.ok) {
                throw new Error(`HTTP error: ${response.status}`);
            }
            
            return await response.json();
        } catch (error) {
            console.error(`API request failed for ${url}:`, error);
            throw error;
        }
    }

    // Streamlined content loading functions with shared error handling
    async function loadContent(endpoint, containerId, renderFunction, errorMessage) {
        const container = document.getElementById(containerId);
        if (!container) return;
        
        try {
            // Show loading indicator
            container.innerHTML = `
                <div class="loading-container">
                    <div class="spinner"></div>
                    <p>Loading your cute songs, please wait a moment uwu...</p>
                </div>
            `;
            
            const data = await apiRequest(endpoint);
            
            // Clear container
            container.innerHTML = '';
            
            // Render content or show empty state
            if (!data || (Array.isArray(data) && data.length === 0)) {
                const noContentIcon = endpoint.includes('playlists') ? 'fa-list' : 
                                     endpoint.includes('liked') ? 'fa-heart' : 'fa-music';
                const noContentMessage = endpoint.includes('playlists') ? 'No playlists found' : 
                                        endpoint.includes('liked') ? 'No liked songs found' : 'No content found';
                
                container.innerHTML = `
                    <div class="no-results" style="grid-column: 1 / -1;">
                        <i class="fas ${noContentIcon}"></i>
                        <p>${noContentMessage}</p>
                    </div>
                `;
                return;
            }
            
            // Render content items
            renderFunction(data, container);
            
        } catch (error) {
            console.error(`Failed to load ${endpoint}:`, error);
            
            container.innerHTML = `
                <div class="error-message" style="grid-column: 1 / -1;" onclick="document.getElementById('${containerId.split('-')[0]}-refresh').click()">
                    <i class="fas fa-exclamation-circle"></i> 
                    ${errorMessage}. Click to retry.
                </div>
            `;
        }
    }

    // Rendering functions for different content types
// Update the renderPlaylists function in dashboard.ejs
function renderPlaylists(playlists, container) {
    playlists.forEach(playlist => {
        const element = document.createElement('div');
        element.className = 'playlist-card animate__animated animate__fadeIn';
        
        const imageUrl = playlist.images?.[0]?.url || '/images/default-playlist.png';
        
        element.innerHTML = `
            <img src="${imageUrl}" alt="${escapeHtml(playlist.name)}" loading="lazy">
            <div class="playlist-info">
                <h4 title="${escapeHtml(playlist.name)}">${escapeHtml(playlist.name)}</h4>
                <p>${playlist.tracks.total} tracks</p>
                <button onclick="window.playlistManager.openPlaylist('${playlist.id}', '${escapeHtml(playlist.name)}')">
                    <i class="fas fa-list"></i> View Playlist
                </button>
            </div>
        `;
        
        container.appendChild(element);
    });
}


//liked songs
// Update the renderLikedSongs function
function renderLikedSongs(data, container) {
    // Clear container first
    container.innerHTML = '';
    
    if (!data.items || !Array.isArray(data.items)) {
        container.innerHTML = '<div class="error-message">No songs found</div>';
        return;
    }

    // Render initial songs
    data.items.forEach(item => {
        if (!item.track) return;
        
        const element = document.createElement('div');
        element.className = 'song-card animate__animated animate__fadeIn';
        
        const imageUrl = item.track.album?.images?.[0]?.url || '/images/default-song.png';
        const artistNames = item.track.artists?.map(a => a.name).join(', ') || 'Unknown Artist';
        const duration = formatDuration(item.track.duration_ms);
        
        element.innerHTML = `
            <img src="${imageUrl}" alt="${escapeHtml(item.track.name)}" loading="lazy">
            <div class="song-info">
                <h4>${escapeHtml(item.track.name)}</h4>
                <p>${escapeHtml(artistNames)}</p>
                <span class="duration">${duration}</span>
                <button onclick="window.musicPlayer.play('${track.uri}')" class="play-btn" ${this.isProcessing ? 'disabled' : ''}>
                    <i class="fas fa-play"></i> play 
                </button>
            </div>
        `;
        
        container.appendChild(element);
    });

    // Set up infinite scroll cz theres always more songs
    if (data.total > data.items.length) {
        const sentinel = document.createElement('div');
        sentinel.className = 'sentinel';
        container.appendChild(sentinel);

        let isLoading = false;
        let currentOffset = data.offset + data.items.length;

        const observer = new IntersectionObserver(async (entries) => {
            const entry = entries[0];
            if (entry.isIntersecting && !isLoading && currentOffset < data.total) {
                isLoading = true;
                sentinel.innerHTML = '<div class="spinner"></div>';

                try {
                    const response = await fetch(`/api/spotify/liked-songs?offset=${currentOffset}&limit=50`);
                    const newData = await response.json();
                    
                    if (newData.items?.length) {
                        renderLikedSongs(newData, container);
                        currentOffset += newData.items.length;
                    }
                    
                    if (currentOffset >= data.total) {
                        observer.unobserve(sentinel);
                        sentinel.remove();
                    }
                } catch (error) {
                    console.error('Failed to load more songs:', error);
                    sentinel.innerHTML = '<button onclick="loadMoreLikedSongs()">Try Again</button>';
                }

                isLoading = false;
            }
        });

        observer.observe(sentinel);
    }
}

// Helper function to format duration
function formatDuration(ms) {
    const minutes = Math.floor(ms / 60000);
    const seconds = Math.floor((ms % 60000) / 1000);
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
}


//np
    function renderNowPlaying(players, container) {
        players.forEach(player => {
            const element = document.createElement('div');
            element.className = 'player-card animate__animated animate__fadeIn';
            
            element.innerHTML = `
                <img src="${player.track.thumbnail}" alt="${escapeHtml(player.track.title)}">
                <div class="track-details">
                    <h3>${escapeHtml(player.track.title)}</h3>
                    <p class="author">${escapeHtml(player.track.author)}</p>
                    <p class="guild">Playing in ${escapeHtml(player.guildName)}</p>
                    <div class="controls">
                        ${player.playing ? 
                            `<button onclick="pauseTrack('${player.guildId}')">
                                <i class="fas fa-pause"></i> Pause
                            </button>` : 
                            `<button onclick="resumeTrack('${player.guildId}')">
                                <i class="fas fa-play"></i> Play
                            </button>`
                        }
                        <button onclick="skipTrack('${player.guildId}')">
                            <i class="fas fa-step-forward"></i> Skip
                        </button>
                        <button onclick="stopTrack('${player.guildId}')">
                            <i class="fas fa-stop"></i> Stop
                        </button>
                    </div>
                </div>
            `;
            
            container.appendChild(element);
        });
    }

// playlist-manager.js class deals with uhhh loading of tracks and opening, this loads playlist covers
    function loadPlaylists() {
        return loadContent(
            '/api/spotify/playlists', 
            'playlist-container', 
            renderPlaylists, 
            'Failed to load playlists'
        );
    }
// we load liked songs from song manager.js
function loadLikedSongs() {
    const container = document.getElementById('liked-songs-container');
    if (!container) return;
    window.songManager.renderLikedSongs(container, true);
}

    function loadNowPlaying() {
        return loadContent(
            '/api/music/now-playing', 
            'now-playing-container', 
            renderNowPlaying, 
            'Failed to load currently playing tracks'
        );
    }

    // Unified player control function to reduce duplication ( these are UNUSEDDDDDDDD )
    async function controlPlayer(action, guildId) {
        const actions = {
            pause: { endpoint: `/api/music/pause/${guildId}`, successMsg: 'Track paused' },
            resume: { endpoint: `/api/music/resume/${guildId}`, successMsg: 'Track resumed' },
            skip: { endpoint: `/api/music/skip/${guildId}`, successMsg: 'Track skipped' },
            stop: { endpoint: `/api/music/stop/${guildId}`, successMsg: 'Playback stopped' }
        };
        
        const { endpoint, successMsg } = actions[action];
        
        try {
            const result = await apiRequest(endpoint, { method: 'POST' });
            
            if (result.error) {
                showToast(result.error, 'error');
                return;
            }
            
            showToast(successMsg, 'success');
            
            // Different delays for different actions to ensure UI is updated properly
            const delay = action === 'skip' || action === 'stop' ? 1000 : 500;
            setTimeout(() => loadNowPlaying(), delay);
        } catch (error) {
            console.error(`${action} track error:`, error);
            showToast(`Failed to ${action} track`, 'error');
        }
    }

    // Wrapper functions for player controls
    function pauseTrack(guildId) {
        return controlPlayer('pause', guildId);
    }

    function resumeTrack(guildId) {
        return controlPlayer('resume', guildId);
    }

    function skipTrack(guildId) {
        return controlPlayer('skip', guildId);
    }

    function stopTrack(guildId) {
        return controlPlayer('stop', guildId);
    }





    //this is used obv>
    // Search functionality
    async function searchSpotify(query) {
        const resultsContainer = document.getElementById('search-results');
        if (!resultsContainer) return;
        
        try {
            // Show loading state
            resultsContainer.innerHTML = `
                <div class="loading-container">
                    <div class="spinner"></div>
                    <p>Searching...</p>
                </div>
            `;
            
            const results = await apiRequest(`/api/spotify/search?q=${encodeURIComponent(query)}`);
            
            // Clear results container
            resultsContainer.innerHTML = '';
            
            if (!results.tracks || results.tracks.items.length === 0) {
                resultsContainer.innerHTML = `
                    <div class="no-results" style="grid-column: 1 / -1;">
                        No results found for "${escapeHtml(query)}"
                    </div>
                `;
                return;
            }
            
            // Display track results
            results.tracks.items.forEach(track => {
                const element = document.createElement('div');
                element.className = 'song-card animate__animated animate__fadeIn';
                
                const imageUrl = track.album && track.album.images && track.album.images.length > 0 ? 
                    track.album.images[0].url : '/images/default-song.png';
                
                const artistNames = track.artists.map(a => a.name).join(', ');
                
                element.innerHTML = `
        <img src="${imageUrl}" alt="${escapeHtml(track.name)}" loading="lazy">
        <div class="song-info">
            <h4 title="${escapeHtml(track.name)}">${escapeHtml(track.name)}</h4>
            <p title="${escapeHtml(artistNames)}">${escapeHtml(artistNames)}</p>
            <button onclick="window.musicPlayer.play('${track.uri}')" class="play-btn" ${this.isProcessing ? 'disabled' : ''}>
                <i class="fas fa-play"></i> Play
            </button>
        </div>
    `;
                resultsContainer.appendChild(element);
            });
        } catch (error) {
            console.error('Search failed:', error);
            
            resultsContainer.innerHTML = `
                <div class="error-message" style="grid-column: 1 / -1;">
                    <i class="fas fa-exclamation-circle"></i> 
                    Search failed. Please try again.
                </div>
            `;
            
            showToast('Search failed', 'error');
        }
    }

    // Utils
    function escapeHtml(unsafe) {
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }

    function showToast(message, type = 'info') {
        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        toast.innerHTML = `
            <div class="toast-content">
                <i class="fas ${type === 'success' ? 'fa-check-circle' : 
                              type === 'error' ? 'fa-exclamation-circle' : 
                              'fa-info-circle'}"></i>
                <span>${message}</span>
            </div>
            <button class="toast-close">&times;</button>
        `;
        
        document.body.appendChild(toast);
        
        // Animation
        setTimeout(() => {
            toast.classList.add('show');
        }, 10);
        
        // Auto dismiss after 5 seconds
        const dismissTimeout = setTimeout(() => {
            dismissToast(toast);
        }, 5000);
        
        // Close button
        toast.querySelector('.toast-close').addEventListener('click', () => {
            clearTimeout(dismissTimeout);
            dismissToast(toast);
        });
    }

    function dismissToast(toast) {
        toast.classList.remove('show');
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        }, 300); // Match animation duration
    }

    function updateBotStatus(online) {
        const statusElement = document.getElementById('bot-status');
        if (statusElement) {
            statusElement.className = `status-badge ${online ? 'online' : 'offline'}`;
            statusElement.textContent = online ? 'Online' : 'Offline';
        }
    }

    // Init function to set up all event listeners and initial loads
    function initDashboard() {
        // Handle return from auth first
        handleAuthReturn();
        
        // Then check session and load data
        checkSession().then(valid => {
            if (valid) {
                // Load content with a slight delay between each to prevent overwhelming the API
                loadNowPlaying();
                setTimeout(() => loadPlaylists(), 300);
                setTimeout(() => loadLikedSongs(), 600);
            }
        });
        
        // Set up tab switching
        const tabs = document.querySelectorAll('.tab');
        tabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const tabId = tab.getAttribute('data-tab');
                
                // Update active tab
                tabs.forEach(t => t.classList.remove('active'));
                tab.classList.add('active');
                
                // Update visible content
                document.querySelectorAll('.tab-content').forEach(content => {
                    content.classList.remove('active');
                });
                document.getElementById(`${tabId}-tab`).classList.add('active');
            });
        });
        
        // Set up search functionality
        const searchInput = document.getElementById('search-input');
        const searchButton = document.getElementById('search-button');
        
        if (searchInput && searchButton) {
            // Search on button click
            searchButton.addEventListener('click', () => {
                const query = searchInput.value.trim();
                if (query) {
                    searchSpotify(query);
                }
            });
            
            // Search on enter key
            searchInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    const query = searchInput.value.trim();
                    if (query) {
                        searchSpotify(query);
                    }
                }
            });
        }
        
        //Set up refresh buttons ;3
        const refreshButtons = {
            'refresh-playlists': loadPlaylists,
            'refresh-liked-songs': loadLikedSongs,
            'refresh-now-playing': loadNowPlaying,
            'refresh-queue': () => window.musicPlayer.updateQueueDisplay(window.musicPlayer.activeGuildId)

        };
        
        Object.entries(refreshButtons).forEach(([id, callback]) => {
            const button = document.getElementById(id);
            if (button) {
                button.addEventListener('click', () => {
                    button.classList.add('spinning');
                    callback().finally(() => {
                        setTimeout(() => {
                            button.classList.remove('spinning');
                        }, 500);
                    });
                });
            }
        });
        
        // Initial bot status check
        fetch('/api/status')
            .then(response => response.json())
            .then(data => {
                updateBotStatus(data.online);
            })
            .catch(() => {
                updateBotStatus(false);
            });
        
        // Check bot status every 60 seconds
        setInterval(() => {
            fetch('/api/status')
                .then(response => response.json())
                .then(data => {
                    updateBotStatus(data.online);
                })
                .catch(() => {
                    updateBotStatus(false);
                });
        }, 60000);
    }

    // Initialize dashboard when DOM is loaded
    document.addEventListener('DOMContentLoaded', initDashboard);

    // Enhance the logout button with loading state
    document.querySelector('.logout-btn').addEventListener('click', async (e) => {
        const button = e.currentTarget;
        
        // Prevent double-clicks
        if (button.classList.contains('loading')) return;
        
        // Add loading state
        button.classList.add('loading');
        
        try {
            await window.authManager.logout();
        } catch (error) {
            console.error('Logout failed:', error);
            // Remove loading state if error
            button.classList.remove('loading');
            // Show error toast
            window.showToast('Logout failed. Please try again.', 'error');
        }
    });

    document.querySelector('.logout-btn').addEventListener('click', async function(e) {
        e.preventDefault();
        const button = this;
        
        // Prevent double clicks
        if (button.classList.contains('loading')) return;
        
        try {
            button.classList.add('loading');
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Logging out...';
            
            const response = await fetch('/logout', {
                method: 'POST',
                credentials: 'same-origin',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            const data = await response.json();
            
            if (data.success) {
                // Clear client-side storage
                localStorage.clear();
                sessionStorage.clear();
                
                window.location.href = data.redirect;
            } else {
                throw new Error(data.error || 'Logout failed');
            }
        } catch (error) {
            console.error('Logout failed:', error);
            button.classList.remove('loading');
            button.innerHTML = '<i class="fas fa-sign-out-alt"></i> Logout';
            window.showToast('Logout failed. Please try again.', 'error');
        }
    });

    // Common utility functions
    const utils = {
        async fetchWithProgress(url, options = {}) {
            const response = await fetch(url, options);
            const reader = response.body.getReader();
            const contentLength = +response.headers.get('Content-Length');

            let receivedLength = 0;
            const chunks = [];

            while(true) {
                const {done, value} = await reader.read();
                
                if (done) break;
                
                chunks.push(value);
                receivedLength += value.length;

                const progress = (receivedLength / contentLength) * 100;
                document.querySelector('.progress-filled').style.width = `${progress}%`;
            }

            document.querySelector('.progress-filled').style.width = '100%';
            setTimeout(() => {
                document.querySelector('.progress-filled').style.width = '0%';
            }, 500);

            const chunksAll = new Uint8Array(receivedLength);
            let position = 0;
            for(let chunk of chunks) {
                chunksAll.set(chunk, position);
                position += chunk.length;
            }

            return new Response(chunksAll);
        },

        showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check-circle' : 
                               type === 'error' ? 'exclamation-circle' : 
                               'info-circle'}"></i>
                <span>${message}</span>
            `;

            const container = document.getElementById('toast-container');
            container.appendChild(toast);

            setTimeout(() => {
                toast.style.opacity = '0';
                setTimeout(() => toast.remove(), 300);
            }, 3000);
        }
    };

    // Initialize
    document.addEventListener('DOMContentLoaded', () => {
        const createParticles = () => {
            const container = document.getElementById('particles');
            for (let i = 0; i < 50; i++) {
                const particle = document.createElement('div');
                particle.className = 'particle';
                particle.style.width = Math.random() * 5 + 'px';
                particle.style.height = particle.style.width;
                particle.style.left = Math.random() * 100 + 'vw';
                particle.style.animationDuration = Math.random() * 3 + 2 + 's';
                particle.style.animationDelay = Math.random() * 2 + 's';
                container.appendChild(particle);
            }
        };

        createParticles();
        
        // Initialize managers
        window.playlistManager = new PlaylistManager();
        window.musicPlayer = new MusicPlayer();

        // Start latency updates
        setInterval(() => window.musicPlayer.updateLatency(), 5000);
    });

    // Add styles for the new components
    const style = document.createElement('style');
    style.textContent = `
        .playlist-tracks {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.5s var(--animation-curve);
        }

        .track-item {
            display: grid;
            grid-template-columns: auto 1fr auto auto;
            align-items: center;
            gap: 1rem;
            padding: 0.75rem;
            margin: 0.5rem 0;
            background: var(--glass-background);
            backdrop-filter: blur(10px);
            border: 1px solid var(--glass-border);
            border-radius: 8px;
            transition: transform 0.2s ease;
        }

        .track-item:hover {
            transform: translateX(5px);
            border-color: var(--primary);
        }

        .track-item img {
            width: 40px;
            height: 40px;
            border-radius: 4px;
        }

        .track-info {
            overflow: hidden;
        }

        .track-info h4 {
            margin: 0;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .track-info p {
            margin: 0;
            font-size: 0.9rem;
            color: var(--text);
            opacity: 0.7;
        }

        .track-duration {
            font-size: 0.9rem;
            color: var(--text);
            opacity: 0.7;
        }

        .play-btn {
            padding: 0.5rem;
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .loading-spinner {
            text-align: center;
            padding: 2rem;
        }

        .pagination {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 1rem;
            margin-top: 1rem;
            padding: 1rem;
        }

        .page-btn {
            background: var(--glass-background);
            border: 1px solid var(--glass-border);
            padding: 0.5rem 1rem;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .page-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .page-btn:not(:disabled):hover {
            background: var(--primary);
            border-color: var(--primary);
        }
    `;

    document.head.appendChild(style);
</script>

</body>
</html>

