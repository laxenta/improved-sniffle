<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= botName %> Dashboard</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

</head>
<body data-page="dashboard">
    <div class="dashboard-container">
        <!-- Sidebar -->
        <aside class="sidebar">
            <div class="sidebar-header">
                <img src="<%= botAvatar %>" alt="<%= botName %>" class="bot-avatar">
                <h2><%= botName %></h2>
            </div>
            
            <nav class="sidebar-nav">
                <ul>
                    <li class="nav-item active">
                        <a href="/dashboard"><i class="fas fa-home"></i> Home</a>
                    </li>
                    <li class="nav-item">
                        <a href="/dashboard/playlists"><i class="fas fa-list"></i> Playlists</a>
                    </li>
                    <li class="nav-item">
                        <a href="/dashboard/liked"><i class="fas fa-heart"></i> Liked Songs</a>
                    </li>
                </ul>
            </nav>
            
            <div class="user-section">
                <div class="user-info">
                    <img src="<%= user.avatarURL %>" alt="<%= user.username %>" class="user-avatar">
                    <div class="user-details">
                        <p class="username"><%= user.username %></p>
                        <div class="connection-status">
                            <span class="discord-status connected">
                                <i class="fab fa-discord"></i> Connected
                            </span>
                            <span class="spotify-status connected">
                                <i class="fab fa-spotify"></i> Connected
                            </span>
                        </div>
                    </div>
                </div>
                <button id="logoutBtn" class="logout-btn">
                    <i class="fas fa-sign-out-alt"></i> Logout
                </button>
            </div>
        </aside>

        <!-- Main Content -->
        <main class="dashboard-main">
            <header class="dashboard-header">
                <div class="search-container">
                    <i class="fas fa-search"></i>
                    <input type="text" id="searchInput" placeholder="Search for songs or playlists...">
                </div>
                <div class="user-controls">
                    <button id="refreshBtn" title="Refresh Data">
                        <i class="fas fa-sync-alt"></i> Refresh
                    </button>
                    <button id="playInDiscordBtn" title="Play in Discord">
                        <i class="fab fa-discord"></i> Play in Discord
                    </button>
                </div>
            </header>

            <!-- Dashboard Sections -->
            <div class="dashboard-content">
                <!-- Your Playlists Section -->
                <section class="content-section" id="yourPlaylists">
                    <h2 class="section-title">Your Playlists</h2>
                    <div class="playlists-container" id="playlistsContainer">
                        <div class="loading-indicator">
                            <i class="fas fa-spinner fa-spin"></i> Loading your playlists...
                        </div>
                    </div>
                </section>

                <!-- Liked Songs Section -->
                <section class="content-section" id="likedSongs">
                    <h2 class="section-title">Liked Songs</h2>
                    <div class="track-container" id="likedSongsContainer">
                        <div class="loading-indicator">
                            <i class="fas fa-spinner fa-spin"></i> Loading your liked songs...
                        </div>
                    </div>
                </section>
            </div>
        </main>
    </div>

    <!-- Toast Notifications -->
    <div id="toastContainer" class="toast-container"></div>

    <!-- Scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="/js/authManager.js"></script>
    <script>
        // Wait for DOM to be ready
        document.addEventListener('DOMContentLoaded', function() {
            // Check if user is authenticated
            if (window.authManager) {
                window.authManager.checkAuth().then(isAuthed => {
                    if (isAuthed) {
                        loadDashboardData();
                    }
                });
            } else {
                loadDashboardData();
            }
        });

        // Dashboard functionality
        function loadDashboardData() {
            // Load liked songs and playlists
            fetchLikedSongs();
            fetchPlaylists();
            
            // Setup event listeners
            setupEventListeners();
        }

        function fetchLikedSongs() {
            fetch('/api/spotify/liked-songs', {
                credentials: 'same-origin'
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to fetch liked songs');
                }
                return response.json();
            })
            .then(songs => {
                renderLikedSongs(songs);
            })
            .catch(error => {
                console.error('Error fetching liked songs:', error);
                showToast('Error loading liked songs', 'error');
                document.getElementById('likedSongsContainer').innerHTML = `
                    <div class="error-message">
                        <i class="fas fa-exclamation-triangle"></i>
                        <p>Failed to load liked songs. <button class="retry-btn" onclick="fetchLikedSongs()">Retry</button></p>
                    </div>
                `;
            });
        }

        function renderLikedSongs(songs) {
            const container = document.getElementById('likedSongsContainer');
            if (!songs || songs.length === 0) {
                container.innerHTML = '<p class="empty-message">No liked songs found.</p>';
                return;
            }

            // Display only the first 5 songs
            const displaySongs = songs.slice(0, 5);
            
            let html = '<div class="track-list">';
            
            displaySongs.forEach(item => {
                const song = item.track || item;
                html += `
                    <div class="track-item" data-uri="${song.uri}" data-id="${song.id}">
                        <img src="${song.album?.images?.[2]?.url || '/images/placeholder.png'}" alt="${song.album?.name || 'Album'}" class="track-image">
                        <div class="track-info">
                            <p class="track-name">${song.name}</p>
                            <p class="artist-name">${song.artists?.map(a => a.name).join(', ') || 'Unknown artist'}</p>
                        </div>
                        <div class="track-actions">
                            <button class="play-track-btn" data-uri="${song.uri}" title="Play on Spotify">
                                <i class="fab fa-spotify"></i>
                            </button>
                            <button class="discord-play-btn" data-query="${song.name} ${song.artists?.[0]?.name || ''}" title="Play in Discord">
                                <i class="fab fa-discord"></i>
                            </button>
                        </div>
                    </div>
                `;
            });
            
            html += '</div>';
            
            if (songs.length > 5) {
                html += `<button class="see-all-btn" onclick="location.href='/dashboard/liked'">See all ${songs.length} liked songs</button>`;
            }
            
            container.innerHTML = html;
            
            // Add event listeners
            document.querySelectorAll('.play-track-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const uri = e.currentTarget.dataset.uri;
                    playOnSpotify(uri);
                });
            });
            
            document.querySelectorAll('.discord-play-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const query = e.currentTarget.dataset.query;
                    playInDiscord(query);
                });
            });
        }

        function fetchPlaylists() {
            fetch('/api/spotify/playlists', {
                credentials: 'same-origin'
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to fetch playlists');
                }
                return response.json();
            })
            .then(playlists => {
                renderPlaylists(playlists);
            })
            .catch(error => {
                console.error('Error fetching playlists:', error);
                showToast('Error loading playlists', 'error');
                document.getElementById('playlistsContainer').innerHTML = `
                    <div class="error-message">
                        <i class="fas fa-exclamation-triangle"></i>
                        <p>Failed to load playlists. <button class="retry-btn" onclick="fetchPlaylists()">Retry</button></p>
                    </div>
                `;
            });
        }

        function renderPlaylists(playlists) {
            const container = document.getElementById('playlistsContainer');
            if (!playlists || playlists.length === 0) {
                container.innerHTML = '<p class="empty-message">No playlists found.</p>';
                return;
            }

            // Display only the first 6 playlists
            const displayPlaylists = playlists.slice(0, 6);
            
            let html = '<div class="playlists-grid">';
            
            displayPlaylists.forEach(playlist => {
                html += `
                    <div class="playlist-item" data-id="${playlist.id}" onclick="location.href='/dashboard/playlist/${playlist.id}'">
                        <div class="playlist-image-container">
                            <img src="${playlist.images?.[0]?.url || '/images/playlist-placeholder.png'}" alt="${playlist.name}" class="playlist-image">
                            <div class="playlist-hover-overlay">
                                <button class="play-playlist-btn" data-uri="${playlist.uri}">
                                    <i class="fas fa-play"></i>
                                </button>
                            </div>
                        </div>
                        <p class="playlist-name">${playlist.name}</p>
                        <p class="playlist-info">${playlist.tracks?.total || 0} tracks</p>
                    </div>
                `;
            });
            
            html += '</div>';
            
            if (playlists.length > 6) {
                html += `<button class="see-all-btn" onclick="location.href='/dashboard/playlists'">See all ${playlists.length} playlists</button>`;
            }
            
            container.innerHTML = html;
            
            // Add event listeners for play buttons - stop event propagation to prevent navigation
            document.querySelectorAll('.play-playlist-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    const uri = e.currentTarget.dataset.uri;
                    playOnSpotify(uri);
                });
            });
        }

        function setupEventListeners() {
            // Search functionality
            const searchInput = document.getElementById('searchInput');
            searchInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    const query = searchInput.value.trim();
                    if (query) {
                        location.href = `/dashboard/search?q=${encodeURIComponent(query)}`;
                    }
                }
            });

            // Refresh button
            document.getElementById('refreshBtn').addEventListener('click', () => {
                fetchLikedSongs();
                fetchPlaylists();
                showToast('Dashboard refreshed', 'success');
            });

            // Play in Discord button
            document.getElementById('playInDiscordBtn').addEventListener('click', () => {
                const query = prompt('Enter a song name to play in Discord:');
                if (query && query.trim()) {
                    playInDiscord(query.trim());
                }
            });
            
            // Logout
            document.getElementById('logoutBtn').addEventListener('click', () => {
                if (confirm('Are you sure you want to log out?')) {
                    window.authManager.logout();
                }
            });
        }

        function playOnSpotify(uri) {
            // Open Spotify with the URI
            window.open(`spotify:${uri.replace('spotify:', '')}`, '_blank');
            showToast('Opening in Spotify...', 'success');
        }

        function playInDiscord(query) {
            fetch('/api/music/play', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ query }),
                credentials: 'same-origin'
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    showToast(data.error, 'error');
                } else {
                    showToast('Now playing in Discord: ' + query, 'success');
                }
            })
            .catch(error => {
                console.error('Error playing in Discord:', error);
                showToast('Failed to play in Discord', 'error');
            });
        }

        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `toast toast-${type}`;
            
            let icon = '';
            switch (type) {
                case 'success':
                    icon = '<i class="fas fa-check-circle"></i>';
                    break;
                case 'error':
                    icon = '<i class="fas fa-exclamation-circle"></i>';
                    break;
                case 'info':
                    icon = '<i class="fas fa-info-circle"></i>';
                    break;
                case 'warning':
                    icon = '<i class="fas fa-exclamation-triangle"></i>';
                    break;
            }
            
            toast.innerHTML = `
                ${icon}
                <span class="toast-message">${message}</span>
                <button class="toast-close">×</button>
            `;
            
            document.getElementById('toastContainer').appendChild(toast);
            
            // Add event listener to close button
            toast.querySelector('.toast-close').addEventListener('click', () => {
                toast.remove();
            });
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                toast.classList.add('toast-fade-out');
                setTimeout(() => {
                    toast.remove();
                }, 300);
            }, 5000);
        }
    </script>
</body>
</html>