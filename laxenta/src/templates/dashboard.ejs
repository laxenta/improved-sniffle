<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - <%= botName %></title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/hover.css/2.3.1/css/hover-min.css">
    <script src="/js/authManager.js"></script>


</head>
<body>
    <header>
        <nav>
            <div class="logo">
                <img src="<%= botAvatar || '/default-avatar.png' %>" alt="<%= botName %>">
                <span><%= botName %></span>
            </div>
            <% if (user) { %>
                <div class="user-info">
                    <img src="<%= user.avatarURL %>" alt="<%= user.username %>">         
                    <span><%= user.username %></span>
                    <% if (hasSpotify) { %>
                        <span class="spotify-connected">
                            <i class="fab fa-spotify"></i> Connected :3
                        </span>
                    <% } %>
                    <!-- Replace form with button -->
                    <button 
                        onclick="window.authManager.logout()" 
                        class="logout-btn"
                        type="button"
                    >
                        <i class="fas fa-sign-out-alt"></i> Logout
                    </button>
                </div>
            <% } %>
        </nav>
    </header>

    <main>
        <% if (!hasSpotify) { %>
            <div class="auth-prompt">
                <h2>Connect Your Spotify</h2>
                <p>Link your Spotify account to start playing music in Discord</p>
                <a href="/auth/spotify" class="spotify-auth-btn">
                    <i class="fab fa-spotify"></i> Link Spotify Account
                </a>
            </div>
        <% } else { %>
            <!-- Search Section -->
            <section class="search-section">
                <h2><i class="fas fa-search"></i> Search and Play</h2>
                <div class="search-container">
                    <input 
                        type="text" 
                        id="search-input" 
                        placeholder="Search for tracks, artists, or paste a Spotify link..." 
                        aria-label="Search"
                    >
                    <button id="search-button">
                        <i class="fas fa-search"></i> Search
                    </button>
                </div>
                <div id="search-results" class="content-grid">
                    <!-- Search results will be populated here -->
                </div>
            </section>

            <!-- Content Tabs -->
            <div class="tabs">
                <div class="tab active" data-tab="playlists">
                    <i class="fas fa-list"></i> Playlists
                </div>
                <div class="tab" data-tab="liked-songs">
                    <i class="fas fa-heart"></i> Liked Songs
                </div>
            </div>

            <!-- Playlists Section -->
            <section class="tab-content active" id="playlists-tab">
                <h2>
                    <i class="fas fa-list"></i> Your Playlists
                    <button class="refresh-button" id="refresh-playlists" title="Refresh">
                        <i class="fas fa-sync-alt"></i>
                    </button>
                </h2>
                <div id="playlist-container" class="content-grid">
                    <!-- Skeleton loaders -->
                    <% for (let i = 0; i < 8; i++) { %>
                        <div class="skeleton-card">
                            <div class="skeleton-img skeleton"></div>
                            <div class="skeleton-title skeleton"></div>
                            <div class="skeleton-subtitle skeleton"></div>
                            <div class="skeleton-button skeleton"></div>
                        </div>
                    <% } %>
                </div>
            </section>

            <!-- Liked Songs Section -->
            <section class="tab-content" id="liked-songs-tab">
                <h2>
                    <i class="fas fa-heart"></i> Liked Songs
                    <button class="refresh-button" id="refresh-liked-songs" title="Refresh">
                        <i class="fas fa-sync-alt"></i>
                    </button>
                </h2>
                <div id="liked-songs-container" class="content-grid">
                    <!-- Skeleton loaders -->
                    <% for (let i = 0; i < 8; i++) { %>
                        <div class="skeleton-card">
                            <div class="skeleton-img skeleton"></div>
                            <div class="skeleton-title skeleton"></div>
                            <div class="skeleton-subtitle skeleton"></div>
                            <div class="skeleton-button skeleton"></div>
                        </div>
                    <% } %>
                </div>
            </section>
        <% } %>
    </main>

    <footer>
        <p>&copy; <%= new Date().getFullYear() %> <%= botName %> | Discord & Spotify Integration</p>
        <p>Bot Status: <span id="bot-status" class="status-badge offline">Checking...</span></p>
    </footer>



<style>

:root {
    --primary: #7289da;
    --primary-dark: #5f73bc;
    --secondary: #1DB954;
    --secondary-dark: #1aa34a;
    --text: #dcddde;
    --background: #36393f;
    --background-alt: #2f3136;
    --card: #40444b;
    --border: #202225;
    --danger: #ed4245;
}

* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: var(--background);
    color: var(--text);
    line-height: 1.6;
}

header {
    background-color: var(--background-alt);
    border-bottom: 1px solid var(--border);
    padding: 1rem;
    position: sticky;
    top: 0;
    z-index: 100;
}

nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    max-width: 1200px;
    margin: 0 auto;
}

.logo {
    display: flex;
    align-items: center;
    font-size: 1.5rem;
    font-weight: bold;
    color: white;
}

.logo img {
    height: 40px;
    width: 40px;
    border-radius: 50%;
    margin-right: 10px;
}

.user-info {
    display: flex;
    align-items: center;
}

.user-info img {
    height: 40px;
    width: 40px;
    border-radius: 50%;
    margin-right: 10px;
}

.spotify-connected {
    background-color: var(--secondary);
    color: white;
    border-radius: 20px;
    padding: 0.25rem 0.75rem;
    margin-left: 10px;
    font-size: 0.8rem;
    display: flex;
    align-items: center;
}

.spotify-connected i {
    margin-right: 5px;
}

main {
    max-width: 1200px;
    margin: 2rem auto;
    padding: 0 1rem;
}

.auth-prompt {
    text-align: center;
    background-color: var(--card);
    border-radius: 10px;
    padding: 3rem;
    margin: 5rem auto;
    max-width: 600px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
}

.auth-prompt h2 {
    margin-bottom: 1rem;
    font-size: 2rem;
}

.auth-prompt p {
    margin-bottom: 2rem;
    color: #a0a0a0;
}

.spotify-auth-btn {
    background-color: var(--secondary);
    color: white;
    border: none;
    padding: 0.75rem 2rem;
    border-radius: 30px;
    font-size: 1rem;
    font-weight: bold;
    cursor: pointer;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    transition: all 0.2s ease;
}

.spotify-auth-btn:hover {
    background-color: var(--secondary-dark);
    transform: translateY(-2px);
}

.spotify-auth-btn i {
    margin-right: 10px;
}

section {
    margin-bottom: 3rem;
}

section h2 {
    margin-bottom: 1.5rem;
    border-bottom: 1px solid var(--border);
    padding-bottom: 0.5rem;
    display: flex;
    align-items: center;
}

section h2 i {
    margin-right: 10px;
    color: var(--secondary);
}

.loading {
    text-align: center;
    padding: 2rem;
    color: #a0a0a0;
}

.error-message {
    background-color: rgba(237, 66, 69, 0.1);
    border: 1px solid var(--danger);
    color: var(--danger);
    padding: 1rem;
    border-radius: 5px;
    text-align: center;
    cursor: pointer;
}

.error-message:hover {
    background-color: rgba(237, 66, 69, 0.2);
}

.content-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1.5rem;
}

.now-playing-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 1.5rem;
}

.playlist-card, .song-card, .player-card {
    background-color: var(--card);
    border-radius: 8px;
    overflow: hidden;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    height: 100%;
    display: flex;
    flex-direction: column;
}

.playlist-card:hover, .song-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
}

.playlist-card img, .song-card img {
    width: 100%;
    aspect-ratio: 1/1;
    object-fit: cover;
}

.playlist-info, .song-info {
    padding: 1rem;
    display: flex;
    flex-direction: column;
    flex-grow: 1;
}

.playlist-info h3, .song-info h4 {
    margin-bottom: 0.5rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.playlist-info p, .song-info p {
    color: #a0a0a0;
    margin-bottom: 1rem;
    font-size: 0.9rem;
}

button {
    background-color: var(--primary);
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    cursor: pointer;
    font-weight: bold;
    margin-top: auto;
    transition: background-color 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
}

button:hover {
    background-color: var(--primary-dark);
}

button i {
    margin-right: 5px;
}

.player-card {
    display: flex;
    flex-direction: row;
    padding: 1rem;
    align-items: center;
}

.player-card img {
    width: 100px;
    height: 100px;
    border-radius: 5px;
    object-fit: cover;
}

.track-details {
    margin-left: 1rem;
    flex-grow: 1;
}

.track-details h3 {
    margin-bottom: 0.3rem;
}

.track-details .author {
    color: #a0a0a0;
    font-size: 0.9rem;
    margin-bottom: 0.3rem;
}

.track-details .guild {
    color: var(--secondary);
    font-size: 0.8rem;
    margin-bottom: 1rem;
}

.controls {
    display: flex;
    gap: 0.5rem;
}

.controls button {
    padding: 0.3rem 0.8rem;
    font-size: 0.9rem;
}

.search-container {
    margin-bottom: 2rem;
    display: flex;
    gap: 1rem;
}

.search-container input {
    flex-grow: 1;
    padding: 0.75rem 1rem;
    border-radius: 4px;
    border: 1px solid var(--border);
    background-color: var(--background-alt);
    color: var(--text);
    font-size: 1rem;
}

.search-container input:focus {
    outline: none;
    border-color: var(--primary);
}

.search-container button {
    padding: 0.75rem 1.5rem;
}

.tabs {
    display: flex;
    border-bottom: 1px solid var(--border);
    margin-bottom: 2rem;
}

.tab {
    padding: 0.75rem 1.5rem;
    cursor: pointer;
    border-bottom: 3px solid transparent;
    font-weight: bold;
}

.tab.active {
    border-bottom-color: var(--secondary);
    color: white;
}

.tab-content {
    display: none;
}

.tab-content.active {
    display: block;
}

.logout-btn {
    background-color: transparent;
    color: #a0a0a0;
    border: 1px solid var(--border);
    padding: 0.5rem 1rem;
    border-radius: 4px;
    cursor: pointer;
    margin-left: 1rem;
    font-size: 0.9rem;
}

.logout-btn:hover {
    background-color: rgba(237, 66, 69, 0.1);
    color: var(--danger);
    border-color: var(--danger);
}

@media (max-width: 768px) {
    .content-grid {
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    }
    
    .now-playing-grid {
        grid-template-columns: 1fr;
    }
    
    .player-card {
        flex-direction: column;
        text-align: center;
    }
    
    .track-details {
        margin-left: 0;
        margin-top: 1rem;
    }
    
    .controls {
        justify-content: center;
    }
}

.tooltip {
    position: relative;
}

.tooltip .tooltip-text {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px;
    position: absolute;
    z-index: 1;
    bottom: 125%;
    left: 50%;
    margin-left: -60px;
    opacity: 0;
    transition: opacity 0.3s;
}

.tooltip:hover .tooltip-text {
    visibility: visible;
    opacity: 1;
}

.status-badge {
    padding: 3px 8px;
    border-radius: 10px;
    font-size: 0.7rem;
    margin-left: 5px;
}

.status-badge.online {
    background-color: var(--secondary);
}

.status-badge.offline {
    background-color: var(--danger);
}

.refresh-button {
    background-color: transparent;
    color: var(--text);
    border: none;
    margin-left: auto;
    padding: 5px;
    cursor: pointer;
}

.refresh-button:hover {
    color: white;
}

footer {
    text-align: center;
    padding: 2rem 0;
    margin-top: 3rem;
    border-top: 1px solid var(--border);
    color: #a0a0a0;
    font-size: 0.9rem;
}

.skeleton {
    background: linear-gradient(90deg, var(--card) 25%, var(--background-alt) 50%, var(--card) 75%);
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
    border-radius: 4px;
}

@keyframes loading {
    0% {
        background-position: 200% 0;
    }
    100% {
        background-position: -200% 0;
    }
}

.skeleton-card {
    height: 250px;
}

.skeleton-card .skeleton-img {
    height: 160px;
    width: 100%;
}

.skeleton-card .skeleton-title {
    height: 20px;
    margin: 10px;
    width: 80%;
}

.skeleton-card .skeleton-subtitle {
    height: 15px;
    margin: 10px;
    width: 60%;
}

.skeleton-card .skeleton-button {
    height: 30px;
    margin: 10px;
    width: 90%;
}

#search-results {
    margin-top: 2rem;
}

.no-results {
    text-align: center;
    padding: 2rem;
    color: #a0a0a0;
}

.logout-btn.loading {
    opacity: 0.7;
    cursor: not-allowed;
}
.logout-btn.loading i {
    animation: fa-spin 2s infinite linear;
}

</style>










   <script>
    // Session management - streamlined with async/await and better error handling
    async function checkSession() {
        try {
            const response = await fetch('/api/auth/verify');
            if (!response.ok) throw new Error(`HTTP error: ${response.status}`);
            
            const data = await response.json();
            
            if (!data.valid) {
                window.location.href = '/auth/discord';
                return false;
            }

            if (!data.user.authStatus.spotify) {
                sessionStorage.setItem('returnPath', window.location.pathname);
                window.location.href = '/auth/spotify';
                return false;
            }
            
            updateBotStatus(true);
            return true;
        } catch (error) {
            console.error('Session check failed:', error);
            updateBotStatus(false);
            return false;
        }
    }

    function handleAuthReturn() {
        const returnPath = sessionStorage.getItem('returnPath');
        if (returnPath) {
            sessionStorage.removeItem('returnPath');
            if (returnPath !== window.location.pathname) {
                window.location.href = returnPath;
            }
        }
    }

    // Unified token refresh function with better error handling
    async function refreshSpotifyToken() {
        try {
            showToast('Refreshing Spotify token...');
            const response = await fetch('/api/spotify/refresh', { 
                method: 'POST',
                headers: { 
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-cache'
                },
                credentials: 'same-origin'
            });
            
            if (response.status === 401) {
                sessionStorage.setItem('returnPath', window.location.pathname);
                window.location.href = '/auth/spotify';
                throw new Error('Token refresh failed - redirecting to auth');
            }
            
            if (!response.ok) {
                throw new Error('Token refresh failed with status: ' + response.status);
            }
            
            const result = await response.json();
            if (!result.success) {
                throw new Error('Token refresh failed');
            }
            
            showToast('Token refreshed successfully!');
            return result;
        } catch (error) {
            console.error('Token refresh failed:', error);
            showToast('Failed to refresh token', 'error');
            throw error;
        }
    }

    // Improved API request wrapper to reduce duplication
    async function apiRequest(url, options = {}, retryCount = 0) {
        try {
            const response = await fetch(url, options);
            
            if (response.status === 401 && retryCount < 2) {
                await refreshSpotifyToken();
                return apiRequest(url, options, retryCount + 1);
            }
            
            if (!response.ok) {
                throw new Error(`HTTP error: ${response.status}`);
            }
            
            return await response.json();
        } catch (error) {
            console.error(`API request failed for ${url}:`, error);
            throw error;
        }
    }

    // Streamlined content loading functions with shared error handling
    async function loadContent(endpoint, containerId, renderFunction, errorMessage) {
        const container = document.getElementById(containerId);
        if (!container) return;
        
        try {
            // Show loading indicator
            container.innerHTML = `
                <div class="loading-container">
                    <div class="spinner"></div>
                    <p>Loading...</p>
                </div>
            `;
            
            const data = await apiRequest(endpoint);
            
            // Clear container
            container.innerHTML = '';
            
            // Render content or show empty state
            if (!data || (Array.isArray(data) && data.length === 0)) {
                const noContentIcon = endpoint.includes('playlists') ? 'fa-list' : 
                                     endpoint.includes('liked') ? 'fa-heart' : 'fa-music';
                const noContentMessage = endpoint.includes('playlists') ? 'No playlists found' : 
                                        endpoint.includes('liked') ? 'No liked songs found' : 'No content found';
                
                container.innerHTML = `
                    <div class="no-results" style="grid-column: 1 / -1;">
                        <i class="fas ${noContentIcon}"></i>
                        <p>${noContentMessage}</p>
                    </div>
                `;
                return;
            }
            
            // Render content items
            renderFunction(data, container);
            
        } catch (error) {
            console.error(`Failed to load ${endpoint}:`, error);
            
            container.innerHTML = `
                <div class="error-message" style="grid-column: 1 / -1;" onclick="document.getElementById('${containerId.split('-')[0]}-refresh').click()">
                    <i class="fas fa-exclamation-circle"></i> 
                    ${errorMessage}. Click to retry.
                </div>
            `;
        }
    }

    // Rendering functions for different content types
    function renderPlaylists(playlists, container) {
        playlists.forEach(playlist => {
            const element = document.createElement('div');
            element.className = 'playlist-card animate__animated animate__fadeIn';
            
            const imageUrl = playlist.images && playlist.images.length > 0 ? 
                playlist.images[0].url : '/images/default-playlist.png';
            
            element.innerHTML = `
                <img src="${imageUrl}" alt="${escapeHtml(playlist.name)}" loading="lazy">
                <div class="playlist-info">
                    <h4 title="${escapeHtml(playlist.name)}">${escapeHtml(playlist.name)}</h4>
                    <p>${playlist.tracks.total} tracks</p>
                    <button onclick="playInDiscord('${playlist.uri}')">
                        <i class="fas fa-play"></i> Play
                    </button>
                </div>
            `;
            container.appendChild(element);
        });
    }

    function renderLikedSongs(data, container) {
        data.forEach(item => {
            const track = item.track;
            const element = document.createElement('div');
            element.className = 'song-card animate__animated animate__fadeIn';
            
            const imageUrl = track.album && track.album.images && track.album.images.length > 0 ? 
                track.album.images[0].url : '/images/default-song.png';
            
            const artistNames = track.artists.map(a => a.name).join(', ');
            
            element.innerHTML = `
                <img src="${imageUrl}" alt="${escapeHtml(track.name)}" loading="lazy">
                <div class="song-info">
                    <h4 title="${escapeHtml(track.name)}">${escapeHtml(track.name)}</h4>
                    <p title="${escapeHtml(artistNames)}">${escapeHtml(artistNames)}</p>
                    <button onclick="playInDiscord('${track.uri}')">
                        <i class="fas fa-play"></i> Play
                    </button>
                </div>
            `;
            container.appendChild(element);
        });
    }

    function renderNowPlaying(players, container) {
        players.forEach(player => {
            const element = document.createElement('div');
            element.className = 'player-card animate__animated animate__fadeIn';
            
            element.innerHTML = `
                <img src="${player.track.thumbnail}" alt="${escapeHtml(player.track.title)}">
                <div class="track-details">
                    <h3>${escapeHtml(player.track.title)}</h3>
                    <p class="author">${escapeHtml(player.track.author)}</p>
                    <p class="guild">Playing in ${escapeHtml(player.guildName)}</p>
                    <div class="controls">
                        ${player.playing ? 
                            `<button onclick="pauseTrack('${player.guildId}')">
                                <i class="fas fa-pause"></i> Pause
                            </button>` : 
                            `<button onclick="resumeTrack('${player.guildId}')">
                                <i class="fas fa-play"></i> Play
                            </button>`
                        }
                        <button onclick="skipTrack('${player.guildId}')">
                            <i class="fas fa-step-forward"></i> Skip
                        </button>
                        <button onclick="stopTrack('${player.guildId}')">
                            <i class="fas fa-stop"></i> Stop
                        </button>
                    </div>
                </div>
            `;
            
            container.appendChild(element);
        });
    }

    // Simplified content loading wrapper functions
    function loadPlaylists() {
        return loadContent(
            '/api/spotify/playlists', 
            'playlist-container', 
            renderPlaylists, 
            'Failed to load playlists'
        );
    }

    function loadLikedSongs() {
        return loadContent(
            '/api/spotify/liked-songs', 
            'liked-songs-container', 
            renderLikedSongs, 
            'Failed to load liked songs'
        );
    }

    function loadNowPlaying() {
        return loadContent(
            '/api/music/now-playing', 
            'now-playing-container', 
            renderNowPlaying, 
            'Failed to load currently playing tracks'
        );
    }

    // Player control functions using the shared apiRequest function
    async function playInDiscord(uri) {
        try {
            showToast('Sending to Discord...');
            
            const result = await apiRequest('/api/music/play', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ query: uri })
            });
            
            if (result.error) {
                showToast(result.error, 'error');
                return;
            }
            
            showToast('Track sent to Discord!', 'success');
            setTimeout(() => loadNowPlaying(), 2000);
        } catch (error) {
            console.error('Play in Discord error:', error);
            showToast('Failed to play track in Discord', 'error');
        }
    }

    // Unified player control function to reduce duplication
    async function controlPlayer(action, guildId) {
        const actions = {
            pause: { endpoint: `/api/music/pause/${guildId}`, successMsg: 'Track paused' },
            resume: { endpoint: `/api/music/resume/${guildId}`, successMsg: 'Track resumed' },
            skip: { endpoint: `/api/music/skip/${guildId}`, successMsg: 'Track skipped' },
            stop: { endpoint: `/api/music/stop/${guildId}`, successMsg: 'Playback stopped' }
        };
        
        const { endpoint, successMsg } = actions[action];
        
        try {
            const result = await apiRequest(endpoint, { method: 'POST' });
            
            if (result.error) {
                showToast(result.error, 'error');
                return;
            }
            
            showToast(successMsg, 'success');
            
            // Different delays for different actions to ensure UI is updated properly
            const delay = action === 'skip' || action === 'stop' ? 1000 : 500;
            setTimeout(() => loadNowPlaying(), delay);
        } catch (error) {
            console.error(`${action} track error:`, error);
            showToast(`Failed to ${action} track`, 'error');
        }
    }

    // Wrapper functions for player controls
    function pauseTrack(guildId) {
        return controlPlayer('pause', guildId);
    }

    function resumeTrack(guildId) {
        return controlPlayer('resume', guildId);
    }

    function skipTrack(guildId) {
        return controlPlayer('skip', guildId);
    }

    function stopTrack(guildId) {
        return controlPlayer('stop', guildId);
    }

    // Search functionality
    async function searchSpotify(query) {
        const resultsContainer = document.getElementById('search-results');
        if (!resultsContainer) return;
        
        try {
            // Show loading state
            resultsContainer.innerHTML = `
                <div class="loading-container">
                    <div class="spinner"></div>
                    <p>Searching...</p>
                </div>
            `;
            
            const results = await apiRequest(`/api/spotify/search?q=${encodeURIComponent(query)}`);
            
            // Clear results container
            resultsContainer.innerHTML = '';
            
            if (!results.tracks || results.tracks.items.length === 0) {
                resultsContainer.innerHTML = `
                    <div class="no-results" style="grid-column: 1 / -1;">
                        No results found for "${escapeHtml(query)}"
                    </div>
                `;
                return;
            }
            
            // Display track results
            results.tracks.items.forEach(track => {
                const element = document.createElement('div');
                element.className = 'song-card animate__animated animate__fadeIn';
                
                const imageUrl = track.album && track.album.images && track.album.images.length > 0 ? 
                    track.album.images[0].url : '/images/default-song.png';
                
                const artistNames = track.artists.map(a => a.name).join(', ');
                
                element.innerHTML = `
                    <img src="${imageUrl}" alt="${escapeHtml(track.name)}" loading="lazy">
                    <div class="song-info">
                        <h4 title="${escapeHtml(track.name)}">${escapeHtml(track.name)}</h4>
                        <p title="${escapeHtml(artistNames)}">${escapeHtml(artistNames)}</p>
                        <button onclick="playInDiscord('${track.uri}')">
                            <i class="fas fa-play"></i> Play
                        </button>
                    </div>
                `;
                resultsContainer.appendChild(element);
            });
        } catch (error) {
            console.error('Search failed:', error);
            
            resultsContainer.innerHTML = `
                <div class="error-message" style="grid-column: 1 / -1;">
                    <i class="fas fa-exclamation-circle"></i> 
                    Search failed. Please try again.
                </div>
            `;
            
            showToast('Search failed', 'error');
        }
    }

    // Utils
    function escapeHtml(unsafe) {
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }

    function showToast(message, type = 'info') {
        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        toast.innerHTML = `
            <div class="toast-content">
                <i class="fas ${type === 'success' ? 'fa-check-circle' : 
                              type === 'error' ? 'fa-exclamation-circle' : 
                              'fa-info-circle'}"></i>
                <span>${message}</span>
            </div>
            <button class="toast-close">&times;</button>
        `;
        
        document.body.appendChild(toast);
        
        // Animation
        setTimeout(() => {
            toast.classList.add('show');
        }, 10);
        
        // Auto dismiss after 5 seconds
        const dismissTimeout = setTimeout(() => {
            dismissToast(toast);
        }, 5000);
        
        // Close button
        toast.querySelector('.toast-close').addEventListener('click', () => {
            clearTimeout(dismissTimeout);
            dismissToast(toast);
        });
    }

    function dismissToast(toast) {
        toast.classList.remove('show');
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        }, 300); // Match animation duration
    }

    function updateBotStatus(online) {
        const statusElement = document.getElementById('bot-status');
        if (statusElement) {
            statusElement.className = `status-badge ${online ? 'online' : 'offline'}`;
            statusElement.textContent = online ? 'Online' : 'Offline';
        }
    }

    // Init function to set up all event listeners and initial loads
    function initDashboard() {
        // Handle return from auth first
        handleAuthReturn();
        
        // Then check session and load data
        checkSession().then(valid => {
            if (valid) {
                // Load content with a slight delay between each to prevent overwhelming the API
                loadNowPlaying();
                setTimeout(() => loadPlaylists(), 300);
                setTimeout(() => loadLikedSongs(), 600);
            }
        });
        
        // Set up tab switching
        const tabs = document.querySelectorAll('.tab');
        tabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const tabId = tab.getAttribute('data-tab');
                
                // Update active tab
                tabs.forEach(t => t.classList.remove('active'));
                tab.classList.add('active');
                
                // Update visible content
                document.querySelectorAll('.tab-content').forEach(content => {
                    content.classList.remove('active');
                });
                document.getElementById(`${tabId}-tab`).classList.add('active');
            });
        });
        
        // Set up search functionality
        const searchInput = document.getElementById('search-input');
        const searchButton = document.getElementById('search-button');
        
        if (searchInput && searchButton) {
            // Search on button click
            searchButton.addEventListener('click', () => {
                const query = searchInput.value.trim();
                if (query) {
                    searchSpotify(query);
                }
            });
            
            // Search on enter key
            searchInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    const query = searchInput.value.trim();
                    if (query) {
                        searchSpotify(query);
                    }
                }
            });
        }
        
        // Set up refresh buttons
        const refreshButtons = {
            'refresh-playlists': loadPlaylists,
            'refresh-liked-songs': loadLikedSongs,
            'refresh-now-playing': loadNowPlaying
        };
        
        Object.entries(refreshButtons).forEach(([id, callback]) => {
            const button = document.getElementById(id);
            if (button) {
                button.addEventListener('click', () => {
                    button.classList.add('spinning');
                    callback().finally(() => {
                        setTimeout(() => {
                            button.classList.remove('spinning');
                        }, 500);
                    });
                });
            }
        });
        
        // Initial bot status check
        fetch('/api/status')
            .then(response => response.json())
            .then(data => {
                updateBotStatus(data.online);
            })
            .catch(() => {
                updateBotStatus(false);
            });
        
        // Check bot status every 60 seconds
        setInterval(() => {
            fetch('/api/status')
                .then(response => response.json())
                .then(data => {
                    updateBotStatus(data.online);
                })
                .catch(() => {
                    updateBotStatus(false);
                });
        }, 60000);
    }

    // Initialize dashboard when DOM is loaded
    document.addEventListener('DOMContentLoaded', initDashboard);

    // Enhance the logout button with loading state
    document.querySelector('.logout-btn').addEventListener('click', async (e) => {
        const button = e.currentTarget;
        
        // Prevent double-clicks
        if (button.classList.contains('loading')) return;
        
        // Add loading state
        button.classList.add('loading');
        
        try {
            await window.authManager.logout();
        } catch (error) {
            console.error('Logout failed:', error);
            // Remove loading state if error
            button.classList.remove('loading');
            // Show error toast
            window.showToast('Logout failed. Please try again.', 'error');
        }
    });

    document.querySelector('.logout-btn').addEventListener('click', async function(e) {
        e.preventDefault();
        const button = this;
        
        // Prevent double clicks
        if (button.classList.contains('loading')) return;
        
        try {
            button.classList.add('loading');
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Logging out...';
            
            const response = await fetch('/logout', {
                method: 'POST',
                credentials: 'same-origin',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            const data = await response.json();
            
            if (data.success) {
                // Clear client-side storage
                localStorage.clear();
                sessionStorage.clear();
                
                // Redirect to home
                window.location.href = data.redirect;
            } else {
                throw new Error(data.error || 'Logout failed');
            }
        } catch (error) {
            console.error('Logout failed:', error);
            button.classList.remove('loading');
            button.innerHTML = '<i class="fas fa-sign-out-alt"></i> Logout';
            // Show error toast
            window.showToast('Logout failed. Please try again.', 'error');
        }
    });
</script>

