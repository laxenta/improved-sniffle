const axios = require('axios');
const fs = require('fs');
const path = require('path');
const https = require('https');

const API_KEY = process.env.APEXIFY_API_KEY || "YOUR_API_KEY_HERE";

module.exports = {
  name: 'ttv',
  description: 'Generate a video from text using Apex AI and send it in the channel.',
  usage: '<your-text>',
  async execute(message, args) {
    const query = args.join(' ').trim();

    if (!query) {
      return message.reply({
        content: 'Please provide some text to generate a video!',
        allowedMentions: { repliedUser: false },
      });
    }

    try {
      const response = await axios.post(
        "https://api.electronhub.top/v1/media/video",
        {
          model: "kling-video/v1.5/pro/text-to-video",
          prompt: query
        },
        {
          headers: {
            "Authorization": `Bearer ${API_KEY}`,
            "Content-Type": "application/json"
          }
        }
      );

      if (!response.data || !response.data.videoUrl) {
        throw new Error('No video was generated by the model.');
      }

      const videoUrl = response.data.videoUrl;

      // Validate the URL
      if (!/^https?:\/\/.+/.test(videoUrl)) {
        throw new Error('Invalid video URL received.');
      }

      const tempFilePath = path.join(__dirname, `temp-${message.id}.mp4`);
      const videoStream = fs.createWriteStream(tempFilePath);

      const request = https.get(videoUrl, (res) => {
        if (res.statusCode !== 200) {
          throw new Error(`Failed to download video. Status code: ${res.statusCode}`);
        }

        res.pipe(videoStream);
        videoStream.on('finish', async () => {
          videoStream.close();

          // Send the video file back to the Discord channel
          await message.channel.send({
            content: `Here is your generated video for: "${query}"`,
            files: [tempFilePath],
          });

          // Clean up the temporary file
          fs.unlinkSync(tempFilePath);
        });
      });

      request.on('error', (err) => {
        console.error('Error downloading video:', err.message);
        fs.unlinkSync(tempFilePath); // Clean up temp file if partially written
        message.reply({
          content: 'An error occurred while downloading the video. Please try again later.',
        });
      });
    } catch (error) {
      console.error('Error in text-to-video command:', error.message);
      await message.reply({
        content: 'Failed to generate a video. Please try again later.',
        allowedMentions: { repliedUser: false },
      });
    }
  },
};